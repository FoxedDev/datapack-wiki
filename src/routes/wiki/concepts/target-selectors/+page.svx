---
title: Target Selectors
description:
  "Target Selectors are used as an argument in commands to select entities and players in the world. We use target
  selectors to find players or mobs and do things to them."
version: 1.21.6
---

# Target Selectors

Target Selectors are used as an argument in commands to select entities and players in the world. We use target
selectors to find players or mobs and do things to them. Many commands need to be given a target selector as an
argument, or otherwise require being executed as an entity.

All target selectors start with an `@` symbol, followed by a base selector (see the table below), and optionally any
other criteria which will narrow down the selection further.

**Example:** `tellraw @a[distance=..10] "You're within 10 blocks of me"`. The target selector is `@a[distance=..10]`,
and tells the game to only send the message to players within 10 blocks.

## Base target selectors

In Java Edition, there are 6 base target selectors:

<div class="overflow-x-auto">

| Target Selector | Description                                                                                                                                                                |
| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| @**e**          | **All Entities** - By itself, this selector will select every single entity which is currently loaded in the world                                                         |
| @**s**          | **This Entity** - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |
| @**a**          | **All Players** - This selects all currently online players. (All players are always loaded in the world).                                                                 |
| @**r**          | **Random Player** - This selects one random player.                                                                                                                        |
| @**p**          | **Nearest Player** - This selects the nearest player to the position this command is ran from.                                                                             |
| @**n**          | **Nearest Entity** - This selects the nearest entity (player or non-player) to the position this command is ran from.                                                      |

</div>

:::warning
@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will
not select that entity.
:::

## Additional arguments

Target selectors can (and usually are) followed by additional arguments to filter the selection even more to only find
the entities that you want. Target selector arguments are contained within square brackets after the base selector
(`@e[...]`) and are written as `[<argument_name>:<argument_value>,<argument_name>=<argument_value>,...]`

**Example**: In our previous example (`@a[distance=..10]`), we use the argument `distance=..10` to specify that we only
want to target entities which are less than 10 blocks away.

:::tip
Most target selectors can be inverted by using =! meaning it will only select entities who do not match the
argument. (E.g. @e[type=!minecraft:creeper] will select every entity that is NOT a creeper)
:::

<div class="overflow-x-auto">

| Argument           | Example                                                    | Description                                                                                                                                                                                                                                                                                                                                                                                                                |
| ------------------ | ---------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `type`             | `@e[type=minecraft:pig]`                                   | Filters to only include entities of a certain type or entity_type tag. Valid with `@e`, `@s` and `@n`. `type` can be any entity ID or entity_type tag.                                                                                                                                                                                                                                                                     |
| `name`             | `@e[name=Aron]`                                            | Filters to include entities with a specific name. `name` is a string - it cannot be JSON text.                                                                                                                                                                                                                                                                                                                             |
| `distance`         | `@e[distance=6]`                                           | Filters to include entities within a certain distance or range. `..` is used to represent "greater/less than" operations - for example, `..6` means less than 6 and, `8..` means more than 8.                                                                                                                                                                                                                              |
| `nbt`              | `@a[nbt={SelectedItem:{id:"minecraft:stone"}}]`            | Filters to include entities with specific [NBT data](/wiki/nbt/nbt). NBT data will be partially matched - as long as the specified data exists on the entity, it doesn't matter what other data it has.                                                                                                                                                                                                                                     |
| `sort` and `limit` | `@e[limit=1,sort=nearest]`                                 | These two arguments are often used together to find entities based on ordering. For example, `limit=5,sort=furthest` selects the 5 entities which are furthest away from the current position.                                                                                                                                                                                                                             |
| `x`/`y`/`z`        | `@e[x=10,y=9,z=-5,distance=..5]`                           | Specifies a starting position to work from; affecting `distance`, `dx`/`dy`/`dz`, and `sort`/`limit`. If left blank, it defaults to `~ ~ ~`.                                                                                                                                                                                                                                                                               |
| `dx`/`dy`/`dz`     | `@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]`                      | Creates a selection area (cuboid) which will only select entities if part of their hit box is within the area. The current position or `x`/`y`/`z` is used as the position of the cuboid's corner, where the coordinates are the smallest. If at least one of the `dx`/`dy`/`dz` values are set, the others default to 0 if not set. The checked area is always 1 block bigger in the positive direction than specified, so the smallest checkable area is a 1x1x1 cube with all values at 0. |
| `tag`              | `@a[tag=CustomTag]`                                        | Selects entities with a specified tag added with the `/tag` command or `Tags[]` NBT. No entities have tags by default - tags can only be added by the datapack or by commands.                                                                                                                                                                                                                                             |
| `team`             | `@a[team=red]`                                             | Selects entities in a specific team.                                                                                                                                                                                                                                                                                                                                                                                       |
| `scores`           | `@e[scores={foo=10}]`                                      | Selects entities based on their value on a scoreboard. Like `distance`, you can use `..` to specify ranges.                                                                                                                                                                                                                                                                                                                |
| `predicate`        | `@e[predicate=namespace:my_predicate]`                     | Selects entities based on whether they pass a custom predicate check.                                                                                                                                                                                                                                                                                                                                                       |
| `gamemode`         | `@a[gamemode=creative]`                                    | Selects players in a specific game mode.                                                                                                                                                                                                                                                                                                                                                                                   |
| `advancements`     | `@a[advancements={minecraft:story/follow_ender_eye=true}]` | Selects players based on whether they have unlocked a specific advancement.                                                                                                                                                                                                                                                                                                                                                |
| `level`            | `@a[level=10]`                                             | Selects players based on their current XP level (not amount of points).                                                                                                                                                                                                                                                                                                                                                    |

</div>

More information about the arguments:

### `type` argument

The `type=<entity_type>` argument will filter the selection to only include entities of a certain type, or those in an
entity_type tag.

`<entity_type>` must be a valid entity ID or entity_type tag ID. This argument can only be used with `@e`, `@s` or `@n`.

**Examples**:

- `@e[type=minecraft:pig]`: Selects all pigs
- `@e[type=#minecraft:aquatic]`: Selects all aquatic animals

### `name` argument

The `name=<entity_name>` argument will filter the selection to only include entities who have a specific name.

`<entity_name>` is a simple string. This can not be a text component but `name=Freddie` would still match a styled name like `{"text":"Freddie","color":"blue"}` or similar.

**Examples**:

- `@e[name=Aaron]`: Selects all entities named `Aaron`
- `@e[name="Aaron Aaronson"]`: Selects entities named `Aaron Aaronson`

:::tip
Note that names with more than one word need to be surrounded by quotes.
:::

### `distance` argument

The `distance=<value_or_range>` argument will filter the selection to only include entities who are within a distance
range.

`<value_or_range>` can either be a value (such as `7`) or a range (such as `..8` or `21..`)

**Examples**:

- `@e[distance=6]`: Selects all entities which are exactly 6 blocks away from the execution position.
- `@e[distance=..20]`: Selects all entities within 20 blocks of the execution position.
- `@e[distance=3..]`: Selects all entities that are more than 3 blocks away from the execution position.
- `@e[distance=12..15]`: Selects all entities between 12 and 15 (inclusive) blocks from the execution position.

### `nbt` argument

The `nbt=<object>` argument will filter the selection to only include entities which have or do not have specific NBT
data.

`<object>` is an [NBT compound](/wiki/nbt/nbt). The entity must match everything within the compound.

**Examples**:

- `@a[nbt={SelectedItem:{id:"minecraft:stone"}}]`: Selects all players who are holding stone
- `@e[type=minecraft:arrow,nbt={inGround:1b}]`: Selects all `arrow` entities who are in a block.

### `sort` and `limit` arguments

The `sort=<sort_type>,limit=<value>` will limit the amount of possible entities it will select and will select entities
based on the priority defined in `<sort_type>`.

`<sort_type>` can be one of the following:

- `arbitrary`: sort in entity load order, which is arbitrary
- `nearest`: sort in increasing order of distance
- `furthest`: sort in decreasing order of distance
- `random`: sort randomly (default type for `@r`)

`<value>` can be any integer.

**Examples**:

- `@e[limit=1,sort=nearest]`: Selects the nearest entity to the position of execution
- `@e[limit=5,sort=furthest]`: Selects the furthest 5 entities from the position of execution.
- `@e[limit=7,sort=random,type=minecraft:cow]`: Selects 7 random cows..

### `x`/`y`/`z` arguments

The `x`/`y`/`z=<value>` arguments do not directly change the selection, but are used alongside other arguments to
specify a starting position to work from.

This argument(s) will affect the arguments `distance`, `dx`/`dy`/`dz` and `sort`/`limit`.

**Examples**:

- `@e[x=10,y=9,z=-5,distance=..5]`: Selects all entities less than 5 blocks away from the position `X=10/Y=9/Z=-5`

### `dx`/`dy`/`dz` arguments

The `dx/dy/dz` arguments will create a cuboid that is at least 1x1x1 blocks big and the given value will increase the
size of the cuboid in that direction by the given value in blocks.

Any entity fully or partially inside the cuboid will be selected.

You can mix and match `dx`, `dz`, and `dz` however you want. To create the cuboid at least 1 of the three has to be
there.

:::info
The generated cuboid does not snap to the block grid 
::: 
:::info 
The base cuboid that gets generated with
dx/dz/dz=0 will always stretch from the command origin to positive x/y/z
:::

**Examples**:

- `@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]`: Selects any entities if any part of their hit box is within the cuboid
  `w=11,h=21,l=6` starting from the position `x=10,y=13,z=87`
- `@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]`: Selects any entities if their hit box overlaps with the block at `x=7,y=3,z=9`

### `tag` argument

The `tag=<tag>` argument will select entities which have the specified tag. `<tag>` is any tag string (no spaces).

Entities do not naturally have tags - these are separate from `entity_type` tags such as that used in the `type`
argument. Instead, these select entities based on the [tags](/wiki/files/tags) added with the `/tag` command or `Tags[]` NBT.

**Examples**:

- `@a[tag=CustomTag]`: Selects all players with the tag `CustomTag`
- `@e[tag=!ignore]`: Selects all entities which do not have the `ignore` tag.

### `team` argument

The `team=<team_name>` argument will select entities which are in a specific team. Since entities can only be in one
team at a time, you cannot use `team=` more than once, however you can duplicate negated team arguments (`team=!`).

`<team_name>` is any tag string (no spaces).

**Examples**:

- `@a[team=red]`: Selects all players in the `red` team
- `@e[team=Bears]`: Selects all entities in the `Bears` team
- `@e[team=!blue]`: Selects all entities which are not in the `blue` team

### `scores` argument

The `scores={<scoreboard>=<value>,...}` argument will select entities based on their value on a scoreboard.

`<objective>` is a scoreboard objective which must exist already. `<value>` can be either an integer or a range.

**Examples**:

- `@e[scores={foo=10}]`: Selects all entities with a score of exactly `10` on the `foo` scoreboard.
- `@e[scores={foo=5,bar=7}]`: Selects all entities with a score of exactly `5` on the `foo` scoreboard and exactly `7`
  on the `bar` scoreboard.
- `@e[scores={foo=8..}]`: Selects all entities with a score of `8` or more on the `foo` scoreboard.

### `predicate` argument

The `predicate=<predicate>` argument will select entities based on whether they pass a predicate check. `<predicate>` is
a predicate ID.

**Examples**:

- `@e[predicate=namespace:my_predicate]`: Selects all entities who pass the predicate in
  `data/namespace/predicates/my_predicate`.
- `@e[predicate=!namespace:another_predicate]`: Selects all entities who fail the predicate in `data/namespace/predicates/another_predicate.json`

### `gamemode` argument

The `gamemode=(survival|creative|adventure|spectator)` argument will select players who are in a specific game mode.

**Examples**:

- `@a[gamemode=creative]`: Selects all players in creative mode

### `advancements` argument

The `advancements={<advancement_name>=(true/false)}` argument will select players based on whether they've unlocked an
advancement. `<advancement_name>` is an advancement ID.

**Examples**:

- `@a[advancements={minecraft:story/follow_ender_eye=true}]`: Selects all players who have unlocked the
  `follow_ender_eye` advancement.
- `@a[advancements={minecraft:story/follow_ender_eye=false}]`: Selects all players who have not unlocked the
  `follow_ender_eye` advancement.

### `advancements` argument

The `advancements={<advancement_name>=(true/false)}` argument will select players based on whether they've unlocked an
advancement. `<advancement_name>` is an advancement ID.

**Examples**:

- `@a[advancements={minecraft:story/follow_ender_eye=true}]`: Selects all players who have unlocked the
  `follow_ender_eye` advancement.
- `@a[advancements={minecraft:story/follow_ender_eye=false}]`: Selects all players who have not unlocked the
  `follow_ender_eye` advancement.

### `level` argument

The `level=<value>` argument selects players based on their current XP level (not amount of points).

`<value>` can be an integer or range.

**Examples**:

- `@a[level=10]`: Selects all players who have an XP level of exactly 10.
- `@a[level=4..]`: Selects all players who have an XP level of 4 or more.

### `x_rotation` argument

The `x_rotation=<value>` argument selects players based on their vertical rotation (pitch).

`<value>` can be a floating point value or float range from -90 to 90

**Examples**:

- `@a[x_rotation=0..90]`: Selects all players who are looking below the horizon or directly at the horizon.
- `@a[x_rotation=90]`: Selects all players who are looking straight down.

### `y_rotation` argument

The `y_rotation=<value>` argument selects players based on their horizontal rotation (yaw).

`<value>` can be a floating point value or float range from -180 to 180

**Examples**:

- `@a[y_rotation=-180]`: Selects all players who are facing exactly due north.
- `@a[y_rotation=-180..-90]`: Selects all players who are looking between north and east or exactly north or east.
