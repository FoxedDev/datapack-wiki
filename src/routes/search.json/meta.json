[{"title":"Home","content":"Welcome to the Datapack Wiki!\nWelcome to the Datapack Wiki, a resource for everything related to Minecraft Datapacks. This community-built wiki has got guides, tutorials, and documentation to help you create and modify Minecraft Datapacks.\n\nNew to Minecraft Datapacks?\nDon't worry! You're in the right place. We've got a guide on how to make a datapack for those of you with no or little experience. If you get stuck, don't hesitate to ask in our Discord Server. Pages on this wiki have been written with beginners in mind - you should have no trouble working through these resources.\n\nWhat are Minecraft Datapacks?\nMinecraft Datapacks are like addons - they are a Minecraft feature that lets you customize Minecraft worlds without mods. They allow you to modify and enhance the game by adding new features and mechanics by using Minecraft commands, advancements, worldgen, and more!\n\nWith datapacks, you can:\nAdd and modify custom recipes\nModify existing or create new loot tables\nAdd new advancements and enchantments\nCreate unique structures\nAnd much more!\n\nContribute\nThis project wouldn't be possible without the support of community members. We encourage you to contribute to this wiki if you want to write any pages, correct any mistakes, or share any of your knowledge!\n\nYou can hit the Edit button on any page to open the GitHub page for the current wiki page. All our contributions are done via GitHub and are written in Markdown. For more information, find the Contribution section of this page, or read our contribution guide on our GitHub repo.","description":"Welcome to the Datapack Wiki, a resource for everything related to Minecraft Datapacks. We've got guides, tutorials, and documentation to help you build your knowledge about data packs.","url":"/","tags":[]},{"title":"Git Practices","content":"Git Practices\n\nLast Updated: 12-13-2024\n\nThis page is an introduction to how we use Git in the wiki repository. In order to keep the wiki consistent and\nreputable, we have a few rules that we follow.\n\nGit provides a lot of features that are great for collaboration, and we try to use them as much as possible.\n\n\nThis guide assumes you already have experience using Git before.\n\n\nForking and PRs\n\nForks are a great way to work on the wiki without introducing unfinished pages, changes, etc. to main.\nYou can click the \"Fork\" button in the top right corner of the repository to\ncreate a fork of the repository. This will create a complete copy of the repository that you can work on.\n\nOnce you have forked the repository, you can clone it to your local machine.\n\nWhen it comes time to merge your changes, you can create a pull request, and a wiki contributor will review your contribution.\n\nBranches\n\nBranches are useful additions to help separate features in your fork. We use kebab-case for branch names meaning the branch \nname should be all lowercase with hyphens to separate words. For example, if you are working on a page called \"Adding New Features\", \nthe branch name should be adding-new-features.\n\nWe do not recommend you use branches for the main repository, even if you have permissions to. \nBranches in the repository are mainly for upcoming Minecraft versions or huge upcoming reworks, if you believe you \nhave a reason to add a branch to the main repository, let a wiki admin know.\n\nCommit Messages\n\nCommit messages are a great way to keep track of what changes have been made to the wiki. Summarize the changes in the\ncommit message and use the imperative mood.\n\nFor example, if you are adding a new page called \"Adding New Features\", the commit message should be\nAdd new page for adding new features. If you are fixing a typo on a page, the commit message could be\nFix typo in page about adding new features.\n\nOptionally, you can add a short description of the changes in the commit message. This is not required, but it is\nrecommended.\n\nMerging\n\nWhenever you start working on a new branch or features, pull the latest changes from the main branch. This\nwill ensure that you have the most up-to-date changes.\n\nYou will likely run into an issue with the search.json file, which is used to generate the search index. This file is\ngenerated automatically and should not be manually edited. A solution to this is to remove the search.json file and optionally\nrun the search index generation script. This will regenerate the file and you can commit it.\n\nnode run ./gen_search_indexes_node.js\n\nOR\n\nbun ./gen_search_indexes.js\n\nOther Important Information\n\nMake a description of your changes in your PR.\nReviewers: Proofread changes before approving them.\nReviewers: It's not required, but it's recommended the changes follow American English for consistency sake.","description":"This page is an introduction to our Git practices a page for the wiki.","url":"/contribute/git-practices/","tags":[]},{"title":"Page Formatting","content":"Page Formatting\n\nLast Updated: 1-31-2025\n\nThis section goes over how we format wiki pages. We like to be consistent, so please read through this section carefully\nand use these features to your advantage:\n\nBasic Writing Guidelines\n\nWhen writing for the wiki, write in a way that is easy to understand and easy for beginners to understand. Put\nyourself in the viewer's shoes. What confused you when you first learned about the topic? What new terms did you learn?\nAvoid using technical terms without explaining them or point to a resource that explains them.\n\nDocumentation and tutorials are a great way to learn, but sometimes you don't need to read every part of a page to\nunderstand it. When writing for the wiki, write in a way that makes it easy to scan and understand quickly. Some\nrecommendations are using white space to your advantage to break your page into easily digestible chunks.\n\nWhen learning a concept, it is helpful to have concrete examples that people can refer to instead of\njust using a concept. This will help wiki-goers understand the concept better and make it easier to remember.\n\nWriting Style\n\nThe datapacking community is a diverse group of people with different backgrounds; many people don't speak English as\ntheir first language!\n\nWhen writing, try to follow these guidelines:\n\nUse the active voice. For example, instead of The pig is teleported by the command, write The command teleported the pig.\nDon't use unnecessary adverbs or adjectives\nTry not to use the words: obvious, simple, basic, easy, actual, just, clear, and however\nExplicitly reference what you are explaining\nUse 's for indicating possession\nUse the Oxford comma\n\nTechnical information\n\nAll content on the website (except a few small exceptions) are made using a technology called mdsvex. This technology\nenables people like you to insert Markdown with svelte components.\n\nIt is recommended to know what the proper way to format Markdown is in order to stay consistent and prevent confusion.\n\nThe front matter title is the same as the title in the sidebar and the title on the page (heading 1 or single\n#)\nUse bold and italics sparingly and only when emphasis is needed\nUse headings to break up the page into sections\nCode blocks are used to show code snippets or commands\nAdmonitions are used to show important information unrelated to the content of the page\nTables are used to show large amounts of data\n\n\nMany markdown formatters do not work well with admonitions. We recommend manually formatting whenever\npossible. Break up lines to make it easier to read in the source and on the page.\n\nKeep lines under 100 characters.\n\n\nEach page is made of 3 parts:\n\nfront matter (metadata about the page such as title, description, tags, version, etc.)\ncontent (the actual content of the page)\ncomponents (custom components that allow for interactivity or other features not able to be reproduced with markdown)\n\nEach is crucial to making the page look and feel how it does.\n\nFrontmatter\n\nWe try to keep the front matter as minimal as possible, but it is still required. Without it, the page\nwill not display correctly on search engines or other sites. The front matter for this page looks like\nthis:\n\ntitle: \"Site Development\"\ndescription: \"This page is meant to be an introduction to formatting a page for the wiki. In it is multiple examples which you can examine raw in the site source code.\"\nversion: 1.21.5\n\nFront matter is denoted with triple hyphens (---) at the top of the page and the end of the front matter.\nThe title should be the same as the title in the sidebar in order to reduce confusion. \nThe description should be a short summary of the content of the page in order to show people what all is covered in the article. \nThe version should be set to the latest version that the page has been and works in. If the page works in 1.21.4 but not in 1.21.5 or later, this should be set to 1.21.4.\n\nCustom Elements\n\nOur markdown system adds unlimited customizability to the way we format our pages. As of the time of writing, we have the following features:\n\nAdmonitions\nCode Titles\nMCFunction Formatting (Thanks Snave!)\nHighlighting\n\nAdmonitions are a way to warnings, info or tips, or other important information to your page.\n\n\nThis is an example of an info box.\n\n\n\nThis is an example of an info box.\n\n\nCode blocks are a way to format code in your page. These code blocks come with the option to add a title to the code\nblock for clarity. The Datapack Wiki supports syntax highlighting for MCFunction which are used for code samples\nwhenever possible.\n\nfunction example() {\nconsole.log(\"Hello World!\");\n}\n\nHighlighting is a way to highlight specific text. It isn't commonly used, but exists.\n\nHighlighted Text like this.\n\nStandardized Elements\n\nThe wiki uses a few elements that are standardized across the entire wiki. Right now this only consists\nof command syntax. You can find the command syntax we use in the commands page.","description":"This page is an introduction to formatting page content, and details about how the wiki handles formatting.","url":"/contribute/formatting/","tags":[]},{"title":"Installing a Datapack","content":"Introduction\n\nSo you've found a nice datapack for Minecraft, and the next step is to get it into your game. This guide will explain\nhow to install a datapack onto a world which exists, a new world.\n\nInstalling a datapack to an existing world\n\nIn your world menu, find the world which you want to install the datapack on. Click Edit.\nThe singleplayer menu\nOpen the world folder. The edit menu\nIn the world folder, open the datapacks folder.\nWorld folder with datapacks highlighted\nPut the datapack zip file into the folder.\nzip folder in datapacks folder\nIf the zip folder contains a folder which contains data and pack.mcmeta, then put that folder in the datapacks\nfolder instead of the full zip. Putting the zip in the datapacks folder only works when data and\npack.mcmeta are directly in the root folder of the zip.\nRejoin the world and run /reload. Reload command in chat\n\nInstalling a datapack to an new world\n\nGo to the Create New World screen. Make sure that you enable cheats.\nCreate new world screen\nNavigate to the Data Packs screen. This is under the \"More\" tab in the latest versions.\nThe Data Packs screen option\nDrag and drop the datapack zip into this screen.\nThe Data Packs screen after I dragged and dropped something in\nIf it doesn't show up, then it's likely that the zip file contains a folder which contains the datapack, and not\nthe zip file just containing the datapack. You need to take the folder out of the datapack, and put it in the\ndatapacks folder (click the \"Open Packs Folder\" button to open it.)\nClick on the datapack icon to apply it to the world\nThe Data Packs screen after I clicked the icon\nCreate the world, and then run /reload in chat.\nReload command in chat\n\nInstalling a datapack to a realm\n\nTo install a datapack to a realm, you need to basically do this:\n\nDownload the world from the realm into your singleplayer worlds.\nFollow the steps in \"Installing a datapack to an existing world\" to install a datapack on that world\nUpload that world to your realm.","description":"So you've found a nice datapack for Minecraft, and the next step is to get it into your game. This guide will explain how to install a datapack onto a world which exists, a new world.","url":"/guide/installing-a-datapack/","tags":[]},{"title":"How to Make a Minecraft Datapack - Beginner's Guide","content":"How to make a Minecraft Datapack\nDatapacks are a Minecraft feature that lets you customize Minecraft worlds without mods. They allow you to modify and enhance the game by adding new features and mechanics by using Minecraft commands, advancements, worldgen, and more! This guide will walk you through the process of creating your first Minecraft datapack from scratch in the latest version.\n\n\nIf you don't know what datapacks are, then take this explanation. Datapacks are essentially add-ons to Minecraft\nwhich can change the game, whether by adding a simple game mechanic, or creating completely new experiences! The best\npart is that they're really easy to create, even if you have little coding knowledge\n\n\nThis guide will help you to create your first datapack, whether you've never tried coding before or if you've got loads\nof experience. The process of coding a datapack is a bit different to other typical programs. By the end of this\ntutorial, you'll have made a simple datapack which makes arrows explode when they land!\n\nPrerequisites\nMinecraft Datapacks basically just consist of text files inside folders. For this reason, you can technically make a datapack with just the default text editor and a file explorer. However, if you are able to, we highly suggest downloading a code editor such as Visual Studio Code. \n\nWith VS Code, you will be able to view errors in your datapack, autocomplete commands, and highlight syntax with different colours so that making datapacks isn't as painful as using Notepad.\n\nDownload Visual Studio Code: https://code.visualstudio.com/download\nGet the VS Code extensions for datapack development: https://marketplace.visualstudio.com/items?itemName=amandin.dpc-pack\n\n\nIf you prefer not to download programs, then you can use a web version of Visual Studio Code which essentially has all the same features, except it can be slower or more difficult to work with. https://vscode.dev/\n\n\nSetting up an empty datapack\n\nThe first step when creating a datapack is to make a new world to test it in. Go ahead and do that now - make sure\nthat your world has cheats enabled and it is set to creative mode. Once you've created the world, the next step\nis to find and open your world folder:\n\nSave and quit your world\nGo to your world in the Singleplayer menu and hit \"Edit\"\nPress \"Open World Folder\"\n\nThe folder that opens contains all the data in your Minecraft world. You should see that there's lots of other subfolders in\nthis folder. Find the one which is called datapacks, and open it. This folder is where the world's datapacks are stored. \nCreate a folder - this will be the root folder of your datapack project. The name doesn't matter. \nI'm just going to call it Example Datapack. Open this new folder. Inside this folder is where all the data starts from.\n\n\nIf you are using Visual Studio Code, at this point you should open it, find Open Folder, and open the newly created folder. Navigating through your datapack will be so much easier!\nopen folder location\n\n\nThe first file we want to create is the pack.mcmeta file. This file will tell Minecraft that the folder is a datapack,\nas well as holding the basic information of the pack. Create pack.mcmeta, and put this inside it:\n\n{\n\"pack\": {\n\"description\": \"DATAPACK NAME HERE\",\n\"pack_format\": 71\n}\n}\n\nIf you're interested, here's what this file means:\n\npack is an object containing the metadata of the file.\ndescription is the name of your datapack, usually along with a short description of what your pack does.\npack_format tells Minecraft what versions this datapack works in. 71 is the latest for 1.21.5\n\nWriting your first function\n\n\nWhat are functions? In short, functions are the majority of what makes up most datapacks. A function is a file\ncontaining Minecraft commands. When a function is ran, every command in the function is ran in order. Functions are\nalways ran as an entity (or as the Server) and at a position\n\n\nLet's get started by writing one simple function. In\ntraditional programming fashion, let's make a function which sends \"Hello World\" to chat.\n\nCreate a folder in your datapack called data.\nIn the data folder, create a new folder. This folder is your namespace - it will contain all the data specific\nto your datapack. Usually this needs to have a unique name (one which other people would not have picked), but\nfor this tutorial just call it example.\nIn the example folder, create a folder called function. This folder will contain all the mcfunction files.\n\nYou should now have a folder structure that looks something like this:\n\n/world/datapacks/Example Datapack/data/example/function\n\n\nIn versions earlier than 1.21, the function folder should be called functions, due to some pesky name changes\nMojang introduced in a recent update.\n\n\nOnce you're sure that's correct, you can start writing the actual function.\n\nIn the function folder, create an empty file called hello_world.mcfunction. Open this file with any text editor (we\nrecommend Visual Studio Code)\n\nInside hello_world.mcfunction, put the following:\n\nShow the player Hello World on their screen\ntitle @s title \"Hello World!\"\n\nGive the player a diamond\ngive @s diamond\n\nIt's that simple! Once you save that file, rejoin your world and then run /reload, you should be able to use\nthe following command to run the function:\n\n/function example:hello_world\n\nWhat's next?\n\nNow you know how to create a basic function and run it, we'll next start to think about how to create our project. For\nmore advanced projects, this can sometimes be the most difficult part. Luckily for us, what we want to create won't be\ntoo difficult.\n\nLet's break down the idea into smaller steps. Remember, we want to create a datapack which makes arrows explode.\n\nDetect when an arrow lands on the ground. We can do this by running a command on a loop which will select any\narrow on the ground and then run a function.\nCreate an explosion. This is as simple as summoning a TNT at the position of the arrow.\nRemove the arrow. If you don't do this, then it will keep on exploding forever.\n\nThe next steps of this guide will guide you through the typical process of each of those steps.\n\nRunning functions on a loop\n\nThe first step on our list is to detect arrows which land on the ground. To do this, we need to run a command on a loop.\nLuckily, Minecraft makes this pretty easy for us.\n\nFirstly, let's make the function which you want to run on a loop. In the function folder, create a new mcfunction\nfile - call this one loop.mcfunction.\n\nFor now, let's just make it say \"Hi\" every time it loops. You can do this by putting this in the new function:\n\nsay Hi\n\nTo make this function run on a loop, we need to create a JSON file which tells Minecraft \"run this command every tick\"\n(every tick = 20 times per second)\n\nIn the data folder, create the minecraft folder.\nIn the minecraft folder, create a tags folder\nIn the tags folder, create a function folder\nIn the new function folder, create a new file: tick.json\n\ntick.json is NOT a function. In tick.json, we are going to put a list of functions which we want to run\nevery tick. If you put any commands in tick.json, it will break your pack.\n\nIn tick.json, put the following:\n\n{\n\"values\": \"example:loop\"]\n}\n\nvalues is a list of function references which will be run on a loop.\nexample:loop is a reference to the loop.mcfunction file we created earlier. example refers to the namespace (the\nfolder in data), and loop refers to the mcfunction file name.\n\nIf you save this file, go back to your world, and run /reload, you should see that the chat is being spammed with \"Hi\"\nover and over again!\n\nSelecting the arrows\n\nNow we've created a function which will run infinitely on a loop, we can move on to detecting when an arrow is in the\nground.\n\nAs far as the game is concerned, an arrow is an entity, just like a pig, cow or zombie. Minecraft gives us a special\nway to select any types of entities with [target selectors. Once we've selected an\nentity, we can use the /execute command to run a command as the entity.\n\nWe can use these to select all arrows which are in the ground, and then run a command to make them explode (and then\nremove themselves).\n\nAs mentioned, to select an entity, we need to use a target selectors. I'm going to teach you a bit about target\nselectors. You should pay attention here, but if you only want the code, scroll past this section.\n\nWhat are target selectors?\n\nTarget selectors are a special bit of code we can use to find an entity in the world. They all start with an @ symbol.\nThere are 6 base target selectors:\n\n| Target Selector | Description|\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e| All Entities - By itself, this selector will select every single entity which is currently loaded in the world|\n| @s| This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a| All Players - This selects all currently online players. (All players are always loaded in the world).|\n| @r| Random Player - This selects one random player.|\n| @p| Nearest Player - This selects the nearest player to the position this command is ran from.|\n| @n| Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.|\n\nOn it's own, a base target selector (like in the table) does not do much. We can narrow down the selection even more by\nusing criteria. Criteria are put in square brackets after the base selector.\n\nFor example, we can use @e with a type criteria to select all entities of a certain type - for example,\n@etype=minecraft:cow] would select all cow entities.\n\nI'm not going to explain every single criteria you can use - you can view a list\n[here. These are the basic ones which you might see quite often:\n\n| Criteria| Description|\n| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [type=minecraft:arrow] | Entity Type - This criteria will narrow down the selection to only include entities of a certain type. For good pack optimisation, you should use this often.|\n| [distance=..5]| Distance to entity - This criteria will only include entities based on their distance to their distance to the current position. .. can be used to represent a greater/less than symbol - for example, ..5 means less than 5 blocks away.|\n| [limit=2]| Limit selection - Using the limit criteria, you can make specify a max amount of entities to be selected. This is often used in conjunction with the sort criteria. For example, @e[sort=nearest,limit=1] would select the nearest entity of any type. |\n| [nbt={key:value}]| Entity Data - This criteria will select entities if their NBT (entity data) matches a pattern.|\n\nHow are we going to use them?\n\nWe can use these selectors to only select arrows which are in the ground. We can select all arrows with\n@e[type=arrow], but this will also include arrows in the air. To select arrows in the ground, we can check if they\nhave the data {inGround:1b}, so we would use @e[type=arrow,nbt={inGround:1b}]\n\nThis target selector can be used in an execute command to run a command as the entity. Try putting this in your\nloop.mcfunction:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run say I'm an arrow, I'm in the ground!\n\nReload your datapack and fire an arrow at at a block. You should see that your chat is spammed with messages, meaning\nthat we successfully selected arrows in the ground, and executed a command as them!\n\nMake it go boom\n\nNow we can move onto the fun part! We have a simple command which will run another command as any arrow in the ground.\nWe only need to do two things with this command:\n\nSpawn an explosion at the position of the arrow\nKill the arrow so that it only explodes once\n\nTo create an explosion in Minecraft, we can simply summon a TNT entity. When a TNT entity is summoned, it will explode\ninstantly.\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\n\nThen, we just need to copy this command and make it kill the arrow after the explosion has happened. This is as simple\nas it sounds - we can use /kill to remove the arrow. Your finished loop.mcfunction should look like this:\n\nexecute as @e[type=arrow,nbt={inGround:1b}] at @s run summon tnt\nkill @e[type=arrow,nbt={inGround:1b}]\n\n\nIn reality, this method isn't the best one to use. Instead of having two commands for this, you can just execute\na function as the arrow which will summon the TNT at @s's position, and then kill @s. By only using the @e selector once\nand then referring to @s, you remove extra stress from the computer. For now, it doesn't matter - this guide is designed\nto give you a better idea of the logic rather than the little details.\n\n\nYou're done! Once you /reload your pack, you should be free to play around with a simple exploding arrows datapack\nwhich you made with the help of this tutorial. Take a break to play around with it - you deserve one!\n\nAnd when you want to move on to other datapack ideas you might have, feel free to join our Discord server for extra\nsupport from our team of helpers. We're more than happy to help you on your journey to creating awesome Minecraft\ndatapacks!","description":"Learn how to create a Minecraft datapack with our beginner's guide. This step-by-step tutorial will help you understand the basics of datapack creation, even if you have little coding knowledge. Start enhancing your Minecraft experience today!","url":"/guide/getting-started/","tags":["guide","beginner","Minecraft","datapack","tutorial","step-by-step"]},{"title":"MCFunction vs Coding","content":"Mods vs Datapacks\n\nMods and datapacks are two commonly confused topics in Minecraft, and knowing the difference between them could help you\ndecide which better fits your use case. While both mods and datapacks extend Minecraft's capabilities, mods generally offer more control and customization, while datapacks are more integrated with the base game and rely on the server environment.\n\nWhat is a mod?\n\nSimply put, mods are modifications to the base game, which includes Java code mods,\ndatapacks, resource packs and Bukkit plugins. In this guide, we will only address two of these topics, Java code mods\nand datapacks. For the remainder of this guide, when you hear mod, we will be referring to Java code mods.\n\nDatapacks\n\nDatapacks are extensions to vanilla features and are officially supported by Mojang Studios. Datapacks are becoming\nincreasingly powerful with the advent of new data-driven features, commands and technical additions such as interactions\nor block displays. For these reasons, datapacks make an excellent addition for a vanilla server or even some modded servers, who don't want to worry about incompatibilities or dealing with broken plugins/mods.\n\nDatapacks can be used to define custom world generation, advancements, enchantments, loot\ntables, recipes and many contain command functions; small scripts which run Minecraft commands (with some small caveats). Datapacks uses these functions to create unique mod-like features or add interactivity in maps. Many impressive datapacks can be so well made they are confused for mods, which is\nwhere some of the confusion between them in mods stem from.\n\nDue to how they work, datapacks can be more limited compared to mods. New features have to be added by Mojang themselves\nbefore they can be used in datapacks and many custom features such as custom entities and custom blocks have yet to be\nimplemented. In addition to this, anything that requires the Minecraft client such as rendering changes or key input\nis not possible, as datapacks are installed on the server/world.\n\nMod\n\nMods are unofficial changes to the game's code using Java and in most cases a mod loader such as Fabric, Forge, NeoForge, etc.\nMods are not supported by Mojang Studios. Mods allow you to do anything you want with the game on both the client and the server.\nThey give you full control of everything in the game from game rendering, to blocks, to key input, to even networking. They allow for\nmuch more complex interactions with some minor caveats.\n\n\nDo not install mods from suspicious sources, as they have near full access to anything on your computer including sensitive files.\n\nAlways download from a reputable distributor such as Modrinth or CurseForge!\n\n\n\nMods can include data and asset files alongside code. This includes shipping model/texture files in the resource pack format, recipe files in the datapack format, and more.\n\nIn some cases, mods can simply be datapacks in a specially formatted JAR file!\n\n\nMods that add blocks or unique interactions can only be used on servers if everyone on the server uses the required mods, which can be hard to manage especially with larger packs. Mods can also be harder to debug and troubleshoot, especially if they utilize parts of Minecraft's obfuscated code. A strength of datapacks is that anyone can join a server that uses them since they are fully vanilla.\n\nSummary of Differences\n\nAs you may have read, datapacks and mods are very different and can be used for very different use cases. Below we've summarized some of the important points into a handy-dandy list!\n\n|Mods|Datapacks|\n|---|---|\n|Allow for full control over all of Minecraft's code|Modify the base systems of the game|\n|Can contain datapacks in the form of data folders|May contain command functions along with system modifications such as recipes or world generation|\n|Full control over everything in game/server and out of game (could be a security risk)|Limited to server-side changes of game mechanics, malicious datapacks are much safer than malicious mods|\n|Generally faster and can improve game and server performance due to high level of control|Generally slower but more lightweight and less resource hungry|\n|Ideal for modifying the game in ways datapacks cannot (e.g custom blocks, new mobs) or adding new mechanics/systems|Ideal for small mods that modify existing systems, \"vanilla\" looking mods and map making|\n|Server owners must verify mod compatibility between clients|Any client can use datapacks, making them easy to manage|\n|May require some knowledge of Java to use and debug effectively|In most cases, easier to debug|\n\nIf you would like to learn how to install datapacks, see our guide!","description":"Learn the differences between using MCFunctions and traditional coding.","url":"/guide/datapacks-for-mods/mods-vs-datapacks/","tags":[]},{"title":"Choosing a Server","content":"Choosing a Server\n\nWhen you join a Minecraft server, you are playing on a computer running a special software. This software allows you to\ninteract with other players on the server and play the game. There are so many different choices when it comes to\nchoosing Minecraft server JARs that it can easily become overwhelming.\n\nIn this guide, we focus on multiple aspects of the various servers, from performance, to datapack support to even\nfeatures that are exclusive to certain server softwares.\n\nBackground Information\n\nBefore we dive into the different server JARs, we need to talk about the different types of Minecraft servers.\nThroughout this guide, we will be using the term \"server JAR\" to refer to the actual Minecraft server file. These JARs\nare Java executable files that run the Minecraft server.\n\nThere are a few common types of Minecraft servers:\n\nVanilla: The vanilla server is the most basic server software, it's just the vanilla game.\nBukkit-based: Bukkit is a plugin-based server software that is used by most Minecraft servers. It is the most\npopular of the server softwares as it provides a wide range of plugins and features.\nModded: Modded servers are based on the Fabric or Forge, which are mod-based server softwares. They are more\ncustomizable than Bukkit-based servers, but are not as popular. The use of modded servers is still very limited,\nmaking it hard to find a mod for some purposes.\nSponge-based: Sponge is a plugin-based server software that is used by many Minecraft servers. It is similar to\nBukkit-based servers, but is more customizable and has support for mods with SpongeForge.\n\nVanilla\n\nThe vanilla server is the most basic server software, and is the one that you get when you download the jar file from\nthe official website. It does not come with mod or plugin support.\nBeyond datapacks, it is not customizable at all.\n\n| Pros| Cons|\n| ----------------------------------------------- | ----------------------- |\n| Easy to set up| No mod support|\n| Fastest to update (comes out with every update) | Mediocre performance|\n| Designed with exclusively datapacks in mind| Limited customizations|\n| No additional bug fixes| No additional bug fixes |\n\n\nFor some, a lack of bug fixes can be both positive and negative. Mileage may vary!\n\n\n\nEven though it mentions bad performace, the vanilla server still has decent performance. For small servers on decent\nhardware, it doesn't really matter what you choose.\n\n\nSpigot\n\nSpigot is another popular server software, it comes with some basic performance\noptimizations, and is not as customizable as Paper. It can cause some issues with datapacks but mitigating\ndatapack-related bugs is significantly easier when compared to Paper. If you want plugins and datapacks, this is likely\nthe one you want.\n\n| Pros| Cons|\n| ------------------------------------------ | --------------------------------------------------- |\n| Popular and well-supported| Bad datapack support by default|\n| Comes with basic performance optimizations | A bit older, May be lacking APIs other servers have |\n| Datapack bugs are less common| Not as customizable as other server softwares|\n\nPaper\n\nPaper is a fork of Spigot, and it's the most popular Bukkit server JAR according to\nbStats. It is one of the most customizable server software on this list and comes\nwith excellent plugin support and amazing performance optimizations. Unfortunately, it is notorious for breaking\ndatapacks and even some plugins for the sake of performance, modernity and bug fixes.\n\n| Pros| Cons|\n| ------------------------------------------------------------ | --------------------------------------------------------------------- |\n| Popular and well-supported| Breaks many datapacks due to destructive performance optimizations|\n| Numerous performance optimizations| Only designed for plugins|\n| Modern and forward-looking| Can take a while to update due to relying on Spigot as a base|\n| Comes with extensive documentation and configuration options | Some useful bugs are fixed by default (TNT duping, sand duping, etc.) |\n\n\nUntil recently, Paper was based Spigot, but recently, they converted the project into a hard fork (no longer based on Spigot), however, the software is still slow to update and make stable releases.\n\n\nForge\n\nForge is a mod-based server software used primarily by older Minecraft servers. Forge is\nthe gold standard for mods for versions >1.13 while still offering support for latest versions. Many mod packs such as\nRLCraft, Pixelmon, ATM (All The Mods) will only run on Forge. Forge is still updated to latest versions, however, newer\nloaders are recommended.\n\n| Pros| Cons|\n| ------------------------------------- | ------------------------------------------------------- |\n| Great for older Minecraft versions| By choosing older versions, you miss out on DP features |\n| Large mod catalog spanning many years | Different mod loaders are recommended nowadays|\n| Many mods do not affect DP features||\n\n\nIt's recommended to use NeoForge on the latest version when possible. This will offer the bestest\nof Datapack features and the most modern mods\n\n\n\nBy choosing an older Minecraft version you will lose out on a lot of cool datapack features.\n\n\nNeoForge\n\nNeoForge is a mod-based server software used by many Minecraft servers. It is a fork of Forge\ndesigned to be cleaner and more modern, with significant reworks to many bloated parts of Forge. It is designed to be\nused with new versions of Minecraft and many mods that did target the latest version of Forge will now target NeoForge\nor both!\n\n| Pros| Cons|\n| ----------------------------------- | ---------------------------------------------------------- |\n| Great for newer Minecraft versions| Finding mods in general is hard|\n| Great modding community| Different mod loaders may provide a larger catalog of mods |\n| Many mods do not affect DP features ||\n\nFabric\n\nFabric is another mod-based server software. Fabric is used by most modern modded servers due\nto its fast boot time, advanced injection and great mods. Fabric is likely the best modded server for use with datapacks\ndue to how it injects its code.\n\n| Pros| Cons|\n| ---------------------------------- | ----------------------------------------------- |\n| Popular and well-supported| Finding server-side mods are hard|\n| Mods rarely affect datapacks| Hard to troubleshoot|\n| Great for newer Minecraft versions | Support for older Minecraft versions is limited |\n\n\nYou may see people talk about Cardboard. It's a mod that can add the Paper API to your Fabric server, but the\nactual functionality is very limited and its slow to update.\n\nWe do not recommend you use it! Instead, try find native Fabric alternatives!\n\n\nSpongeVanilla\n\nSpongeVanilla is the vanilla version of Sponge. It is an\nalternative to Bukkit-based server jars with incredible extensibility. It is very rarely used due to the lack of\nmods/plugins supporting it.\n\n| Pros| Cons|\n| ---------------------------------- | ---------------------------------------------------- |\n| High quality plugins are common| Support for newer Minecraft versions is experimental |\n| Generally fast| Server support is hard to find|\n| Great for older Minecraft versions | Finding Sponge mods are hard|\n\nSpongeForge\n\nSpongeForge is a version of Sponge with support for Forge mods.\nSimilarly to SpongeVanilla, it is very rarely used due to the lack of mods supporting it.\n\n| Pros| Cons|\n| ---------------------------------- | -------------------------------------------------------------------------------- |\n| Support for plugins and mods| Support for newer Minecraft versions is experimental|\n| Plugins are well integrated| Generally not as popular as Bukkit-based servers|\n| Great for older Minecraft versions | Finding Sponge mods are hard, support for Forge mods is pinned at lower versions |\n\nHonorable Mentions\n\nMinestom\n\nMinestom is a very high performance, lightweight server jar designed for extreme customizability at the expense of doing\neverything yourself.\n\n\nThis server jar is basically an empty shell and is only recommended for highly technical purposes. You need\nto program everything you want into this server yourself, including features you may expect to come with the jar\n(lighting). You have been warned!\n\n\n| Pros| Cons|\n| --------------------------------------------------- | ---------------------------------------------- |\n| Extremely high performance| Almost everything must be manually implemented |\n| Uber customizable, anything you dream is possible!| HIGHLY TECHNICAL! Expect many errors with DIY|\n| Absolutely no obfuscation, the protocol is readable | An understanding of networking may be required |\n\nProxies (BungeeCord, Velocity, Waterfall, etc.)\n\nThese \"servers\" are different from the rest, as they themselves are not servers, but rather\nproxies.\n\nMost Minecraft servers can't handle more than a hundred-or-so people at once, so how do giant servers like Hypixel have\ntens of thousands of people on at one time? Imagine a large server with many mini games. Every time you teleport to a\ngame, a proxy is sending you to a completely different server, usually dedicated to running just that game. Larger\nservers can have thousands of people online at a time because not everyone is in one server, they are split between tens\nor hundreds of servers. Simply put, the proxy is like glue, sticking servers together and allowing people to \"teleport\"\nbetween them.","description":"Learn the differences, pros and cons of different Minecraft server softwares, and which one you should use for datapacks, mods and/or plugins.","url":"/guide/choosing-a-server/","tags":[]},{"title":"Right Click Detection Summary","content":"Right Click Detection\nThere a few ways we can detect right clicks in a Minecraft datapack, depending on your situation. Here are the methods we can use:\n\nUsing a Carrot on a stick\nThis method is the \"traditional\" right click detection method. We can use a scoreboard to detect when a player right clicks a carrot on a stick item. \n\nThis is the most straightforward method for simple right click detection, but it has certain drawbacks - including making pigs follow the player.\n\nUsing an item with the consumable component\nWith the item changes added in 1.20.5, we can now detect right clicks on any item using the consumable component. This method is much more versatile. However, this method triggers once per tick, not just once per right click.\n\nUsing an Eye of Ender\nThis method is a bit more niche, as it only works in worlds without strongholds. This method also triggers once per tick, not just once per right click.\n\nClicking an Interaction Entity\nThis method detects when the player right clicks on an interaction entity. Unlike the other methods, which all detect right clicks while holding specific items, this method lets you detect when a player right clicks on a specific area of the world.","description":"This section goes over the various ways of detecting right clicks with a Minecraft datapack.","url":"/guide/right-click/","tags":[]},{"title":"Using the Consumable component for RC detection","content":"Consumable Component Right Click Detection\nThe minecraft:consumable component can be a helpful indicator of when an item is right clicked by the player in a Minecraft datapack. We can detect usage of an item with the consumable and food components with an advancement which can trigger a function. This method can be used on almost any type of item.\n\n\nThis method will work for any type of item. However, if the item type already has a default rightclick functionality (such as placing a block), it will keep that functionality. This method is best used for items that don't have a default rightclick functionality.\n\n\nMethod\nTo detect when the item is being used (in this case, being right clicked), you must create a using_item advancement, and specify the item data you want to trigger the advancement. Then, you can specify a reward function which will be run when the advancement is triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"custom_id\": \"your_custom_item_id\"}\n}\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case, /data/ /functions/rightclick_run.mcfunction), you can put commands that you want to run when the item is clicked. Make sure that this function also revokes the advancement so that it can be triggered again next tick.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :click\n\nCustom logic\nsay I right clicked the item!\n\nAfter /reloading the datapack, we will now need to give the player the item with the custom food and data components.\n\ngive @p [consumable={consume_seconds:999999999,animation:\"none\"},food={nutrition:0,saturation:0,can_always_eat:true},custom_data={custom_id:\"your_custom_item_id\"}] 1\n\nNow, when you right click this item, it should send a message to the chat saying I right clicked the item!.","description":"Using the minecraft:consumable component to detect when the user right clicks an item in a datapack.","url":"/guide/right-click/consumable_component/","tags":[]},{"title":"Using an Eye of Ender for RC detection","content":"Eye of Ender Right Click Detection\n\n\nThis only works in world without strongholds, if you don't want that, you can either use a similiar method that works everywhere (using the Food Component method) or do some chnages to these functions, as specified at the end of this guide.\n\n\nEye of ender items can be used to detect right clicks in Minecraft. Similarly to the Carrot on a Stick method, we can detect when an eye of ender item is being used by the player as a result of right clicking it.\n\nUnlike the Carrot on a Stick method, this method will be trigger every tick that right click is being held, instead of just once when right click is pressed.\n\nMethod\nTo detect when an eye of ender is being used, you must create a using_item advancement, and specify the item data you want to trigger the advancement. Then, you can specify a reward function which will be run when the advancement is triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:using_item\",\n\"conditions\": {\n\"item\": {\n\"items\": [\n\"minecraft:ender_eye\"\n],\n\"predicates\": {\n\"minecraft:custom_data\": {\"custom_id\": \"your_custom_item_id\"}\n\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case, /data/ /functions/rightclick_run.mcfunction), you can put commands that you want to run when the item is clicked. Make sure that this function also revokes the advancement so that it can be triggered again next tick.\n\nRevoke the advancement from the player so it can be used again\nadvancement revoke @s only :used_eye_of_ender\n\nCustom logic\nsay I successfully used EoE detection!\n\nIf you want this method to work in worlds with strongholds, you can either block the target of ender eyes in the pack.mcmeta or killing the eye and giving it back after it being used.","description":"An intresting right click detection method for sure, due to the fact that it can only be used in worlds without strongholds!","url":"/guide/right-click/eoe/","tags":[]},{"title":"Using an Interaction Entity for RC detection","content":"Interaction Right (and left) Click Detection\nAn interaction entity can detect clicks in a specific area, instead of on an item. Interaction entities can detect both right and left clicks (although this guide will go over right clicks specifically). There are two methods to detect right clicks using interaction entities, depending on what you want to do afterwards.\n\nMethod 1: Detect when a player right clicks an interaction entity\nThis method works best when you want to do something to the player when they right click the interaction entity.\n\nTo detect when the interaction entity has been interacted with, you must create a player_interacted_with_entity advancement, and specify the entity data you want to trigger the advancement. Then, you can specify a reward function which will be run when the advancement is triggered.\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:player_interacted_with_entity\",\n\"conditions\": {\n\"entity\": {\n\"type\": \"minecraft:interaction\",\n\"nbt\": \"{Tags:[\\\\\"my_interaction\\\\\"]}\"\n}\n}\n}\n},\n\"rewards\": {\n\"function\": \":rightclick_run\"\n}\n}\n\nIn the function (in this case, you will need to create it: /data/ /functions/rightclick_run.mcfunction), you can put commands that you want to run when the interaction entity is right clicked. Make sure that this function also revokes the advancement so that it can be triggered again next tick.\n\nRevoke the advancement so we can detect the click again\nadvancement revoke @s only namespace:interacted_with_interaction\n\nCustom logic\nsay I clicked the interaction entity!\n\nNow you can summon the interaction entity by doing /summon interaction~ {Tags:[\"my_interaction\"]} - you may want to enable hitboxes with F3 + B in order to see the hitbox of the interaction entity (it is invisible without it).\n\nMethod 2: Detect when an interaction entity is right clicked\nThis method works best when you want to do something to the interaction when it is right clicked, ignoring which player did it.\n\nThe interaction entity will have an interaction NBT tag when it has been right clicked by a player. You can use a tick function to detect this easily using execute if entity, and run a function as the interaction entity when it has been triggered:\n\nexecute as @e[type=interaction,tag=my_interaction] if data entity @s interaction run function :rightclick_run\n\nIn the rightclick_run function, you will need to remove the interaction NBT from the entity so that it resets, and then you can add custom logic:\n\nRemove the interaction tag so it can be used again\ndata remove entity @s interaction\n\nCustom logic\nsay I was right clicked!\n\n\nIf you want to detect left clicks instead, then instead of checking and removing the interaction NBT, use the attack NBT.\n","description":"Interaction entities can be used to detect when a player rightclicks or leftclicks in a specific area of the world.","url":"/guide/right-click/interaction/","tags":[]},{"title":"Using COAS/WFOAS for RC detection","content":"Carrot on a Stick Right Click Detection\n\nUsing a carrot on a stick (or a warped fungus on a stick) is perhaps one of the simplest methods of right-click\ndetection, requiring only a single tick command and a scoreboard. This method works due to the used:carrot_on_a_stick\nstatistic detecting right clicks on any carrot_on_a_stick item.\n\n\nFor the sake of simplicity, we will use a carrot on a stick, shortened to COAS. This method also works with\nwarped fungus on a stick (WFOAS) items.\n\n\nCOAS and WFOAS items have a unique property that means that right clicking the item counts as \"using\" an item, and will\ntherefore increase the used:carrot_on_a_stick statistic. We can track changes to this statistic using a scoreboard.\nWhen it goes up, we know that the player has right clicked a COAS, and we can run a command when that happens.\n\nMethod\n\nTo get started, we need to create a scoreboard with the criteria minecraft.used:minecraft.carrot_on_a_stick, so that we can\nlater detect when a player uses the COAS (by right clicking on it).\n\nIf you don't already have it, you'll need to create a load function with a command that creates a new scoreboard\nobjective. You can name the objective whatever you want. We recommend naming it something like .rc_coas. In\nyour load function, put a scoreboard command such as this:\n\nscoreboard objectives add.rc_coas minecraft.used:minecraft.carrot_on_a_stick\n\nThis scoreboard will go up by 1 every time a player right clicks a COAS - when this happens we can execute our\nfunction. Note that this command must run every tick, otherwise it won't be able to detect right clicking. Put this in\nyour tick/loop function:\n\nThis will run the \"rc_run\" function as the player who uses the COAS.\nexecute as @a[scores={.rc_coas=1..}] run function :rc_run\nscoreboard players reset @a[scores={.rc_coas=1..}].rc_coas\n\nIn the rc_run.mcfunction file, you can do whatever you like as a result of right clicking the COAS. As an\nexample, putting this in rc_run.mcfunction will make the player say Used COAS when they right click a COAS\nitem.\n\nsay Used COAS\n\nDetecting specific items\nThe above method will detect when any carrot on a stick item is right clicked, which by itself isn't useful. Instead, we want to detect when a specific carrot on a stick item is clicked.\n\nWe can give our carrot on a stick item a special custom_data component which is unique to our custom item. The custom_data component can support any NBT data, but the simplest value would be {item:\"my_custom_item\"}:\nGive the player the custom item\ngive @s carrot_on_a_stick[custom_data={item:\"my_custom_item\"}]\n\nThen, we can just add an extra check to our execute command in tick.mcfunction to only run the function when the player is holding our custom item:\nReplace the previous execute command in tick.mcfunction with this:\nexecute as @a[scores={.rc_coas=1..}] if items entity @s weapon.mainhand carrot_on_a_stick[custom_data~{item:\"my_custom_item\"}] run function :rc_run\nIf you want more than one custom item, simply copy the above command, and just change \"my_custom_item\"","description":"Using a carrot on a stick for right click detection is an easy way to detect right clicks with a datapack.","url":"/guide/right-click/coas/","tags":[]},{"title":"Array Iteration","content":"Array Iteration\nArray Iteration allows us to loop through an array and do something with each item individually (for example, add every item in an array, output each array item individually, modify all elements in an array, combine strings in an array, etc.)\n\nMethod\nFor this guide, imagine our array is defined with the following:\ndata modify storage minecraft:example ExampleArray set value [\"Array Item 1\", \"Array Item 2\", \"Array Item 3\"]\n\nThe steps to iterate through the array are:\nStore the length of the array in a score\nDo something with the first element in the array (array[0]) - you can either just read the element, or modify it\nCopy the first element to the end of the array, then remove the first element.\nDecrease the length score by 1\nIf the length score is 1 or more, repeat from step 2 until it isn't\n\nFirst, we need a function which will begin the process. This is where we do step 1 and then run the loop function:\n\nGet the length of the array, and store it in a fake player in a scoreboard\n(we assume you already have created a scoreboard - do this in your load function)\nexecute store result $length run data get storage minecraft:example ExampleArray\n\nIf the length is at least 1, run the loop function\nexecute if score $length matches 1.. run function :array_loop\n\nIn the array_loop function, you can do whatever you want to the array item, including modifying it. In this example, we will send the array item to chat, and then replace it with \"Iterated\"\n\nWe can access the current array item with \"storage minecraft:example ExampleArray[0]\"\n\nSend the current array element to chat\ntellraw @a {\"nbt\":\"ExampleArray[0]\",\"storage\":\"minecraft:example\"}\n\nReplace the current array element with \"Iterated\"\ndata modify storage minecraft:example ExampleArray[0] set value \"Iterated\"\n\nCopy the current element to the end of the array then remove the current element (so the loop will work)\ndata modify storage minecraft:example ExampleArray append from storage minecraft:example ExampleArray[0]\ndata remove storage minecraft:example ExampleArray[0]\n\nDecrease the length score\nscoreboard players remove $length 1\n\nIf there are still items left (length is not 0), run the loop again\nexecute if score $length matches 1.. run function :array_loop\n\nThe chat output should be as follows:\nArray Item 1\nArray Item 2\nArray Item 3\n\n/data get storage minecraft:example ExampleArray\nOutput: [\"Iterated\", \"Iterated\", \"Iterated\"]","description":"This guide explains how to loop through an array's items in a Minecraft datapack","url":"/guide/nbt-and-scores/array-iteration/","tags":[]},{"title":"Floating Point Division","content":"Division with floating points\nTypically, we can use scoreboard players operation to divide two numbers in Minecraft. However, this command will only output an integer. If the result of the division is a decimal number, it is always rounded down. To divide numbers with decimal points, we need to use a workaround:\nMultiply the dividend by a large factor of 10 (e.g 1000000)\nDivide the numbers using scoreboard players operation\nStore the result to a data storage, scaling it down by the same factor of 10.\n\nHere is an example of how to divide two arbitrary integer numbers:\nDefine the numbers we want to divide (in this case, 10 / 3)\nscoreboard players set #dividend math 10\nscoreboard players set #divisor math 3\n\nMultiply the dividend by 1000000\nexecute store result storage temp minecraft:math int 1000000 run scoreboard players get #dividend math\nexecute store result score #dividend math run scoreboard players get storage temp minecraft:math\n\nDivide the numbers\nscoreboard players operation #dividend math /= #divisor math\n\nStore the result to a data storage\nexecute store result storage result minecraft:math float 0.000001 run scoreboard players get #dividend math\n\nDisplay the result\ntellraw @a {\"nbt\":\"result\",\"storage\":\"temp\"}\n\nAlternatively, you can scale by 1/n to divide by n. For instance, if you want to divide by 2, you can scale by 1/2 which is 0.5:\nDefine the numbers we want to divide (in this case, 10 / 2)\nscoreboard players set #dividend math 10\n\nScale down by 0.5 (divide by 2)\nexecute store result storage result minecraft:math float 0.5 run scoreboard players get #dividend math\n\nDisplay the result\ntellraw @a {\"nbt\":\"result\",\"storage\":\"temp\"}","description":"Learn how to divide numbers in Minecraft which have decimal points.","url":"/guide/nbt-and-scores/division/","tags":[]},{"title":"Player ID System","content":"Player ID System\nThis guide will explain how to create a player ID system within a datapack. A player ID system gives each player a unique score on a scoreboard, which can then be used to link players to entities, or for the player to be able to select another player easily.\n\nAssigning player IDs\nFirstly, we need to create a scoreboard objective to store the players' IDs. This scoreboard will also hold a counter of the IDs given in a fake player so that no two players end up with the same ID.\n\nCreate the playerid scoreboard\nscoreboard objectives add playerid dummy\n\nNext, we need to assign an ID to the player when they first join the world. Create a function which assigns the value of the max player ID counter to the player, and then increments it by one.\n\nAssign the max player ID to the player\n(When this is first ran, .max playerid is not set and read as 0, so the first player gets the ID 0)\nscoreboard players operation @s playerid = .max playerid\n\nIncrement the max player ID by one\nscoreboard players add .max playerid 1\n\nFinally, we need to make this function run when a player first joins the world. We can do this using a tick advancement - it will only trigger when the player first joins the world.\n{\n\"criteria\": { \n\"requirement\": { \n\"trigger\": \"minecraft:tick\" \n} \n},\n\"rewards\": { \n\"function\": \":assign_id\" \n}\n}\n\nFind the player/entity with a specific ID\nWe can use a predicate to check if the player has the same ID as the specified ID (stored in a fake player on a scoreboard). In this case, this predicate will only trigger if the player's playerid score is equal to the playerid score of the fake player (#this)\n\n{ \n\"condition\": \"minecraft:entity_scores\", \n\"entity\": \"this\", \n\"scores\": {\n\"playerid\": {\n\"min\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" },\n\"max\": { \"type\": \"minecraft:score\", \"target\": { \"type\": \"minecraft:fixed\", \"name\": \"#this\" }, \"score\": \"playerid\" }\n}\n}\n}\n\nWe can call this predicate any time we want to find the player or entity with a specific ID - just set the #this fake player to the score you want to match, and then call the predicate as all entities or players. This function will return all the entities with the same ID as the executor:\n\nSet #this to the current entity's ID\nscoreboard players operation #this playerid = @s playerid\n\nFind all entities which have the same ID\nexecute as @e[predicate= :match_id] run say I have the same ID.","description":"Create a player ID system in a Minecraft datapack for linking players to entities.","url":"/guide/nbt-and-scores/player-id-system/","tags":[]},{"title":"Generating Random Numbers","content":"Generating Random Numbers using Datapacks!\nGenerating a random number is very useful in programming for many reasons. Minecraft 1.20.2 added the /random command, which lets us do this very easily. However, if you are using an older version, you can still generate random numbers using loot tables.\n\n1.20.2 and newer\nBecause of the /random added in 1.20.2, it is much simpler to generate random numbers. It now only requires a single\ncommand:\n\nexecute store result ... run random value 1..10\n\nIn the command you can change the values 1 and 10 to change the range. You can fill in ... to specify where you want to store the random number. For example, to store the random number in the player's scoreboard:\n\nexecute store result score @s run random value 1..10\n\n1.20.1 and below\nIn earlier versions, a loot table can be used to generate a random number. This works by summoning a loot table which will drop a random amount of air items, and storing the result of that summon.\n\nThis template loot table can be used to generate a random number between 1 and 10:\n\n{\n\"pools\": [\n{\n\"rolls\": {\n\"min\": 1,\n\"max\": 10\n},\n\"entries\": [\n{\n\"type\": \"minecraft:item\",\n\"name\": \"minecraft:stone\",\n\"functions\": [\n{\n\"function\": \"minecraft:set_count\",\n\"count\": 0\n}\n]\n}\n]\n}\n]\n}\n\nYou can change the values 1 and 10 to change the range. If you leave it as it is, it generates a random number between\n1-10.\n\nTo use this, you will just have to store the result of summoning this loot table:\n\nexecute store result ... run loot spawn~ loot :rng","description":"Generate a random number in a datapack using the /random command, or alternatively, a loot table.","url":"/guide/nbt-and-scores/random-numbers/","tags":[]},{"title":"Debugging your Datapacks","content":"Debugging your datapacks\nThere will come times when your datapack won't work, and you will have to figure out what exactly doesn't work in it.\nDon't worry if this happens to you, if you're like any of the rest of us, this will happen often. Code will almost never\nwork the first time you try it. An error in your code is referred to as a bug. Removing these bugs is called debugging.\nThis guide will teach you the best methods for debugging datapacks.\n\nWhat are bugs?\n\nBugs are a fancy programmer term for an error in your code. There are two main types of bugs:\n\nSyntax error: This is a bug in the actual written code. This is caused by the code you write being incorrectly\nwritten so that the computer literally can't read it. For example, writing executr as @a would be a syntax error\nbecause executr isn't a command.\nLogic error: This is a bug where the written code is correctly written, but the code doesn't do what you want it\nto. This is caused by a mistake in the code logic. In the simplest example, if you want to give a player 32 diamonds,\nbut you accidentally wrote 322.\n\nFinding and debugging syntax errors\n\nSyntax errors are pretty easy to spot and fix, due to Minecraft's output logs, which literally tell you if your code is\nincorrect. When you're coding datapacks, its a good idea to always have the logs open if you need to double check it.\nYou can open the logs by opening the default Minecraft launcher and clicking \"Settings\", and then enabling \"Open output\nlog when Minecraft: Java Edition starts\", then just starting the game.\n\nA guide on how to open the Minecraft launchers output logs\n\nSyntax errors will show up in red text when you /reload your datapack. But sometimes other errors can also show in\nyellow text instead.\n\nLets take this image as an example: Output log with an error. Here, the\nerror tells you exactly where the error is - in this case it's in the function \"be:give\" at line 1 after \".... give @s\".\nAnd indeed I did spell \"loot\" as \"lot\", which caused the error.\nCode with a syntax error\n\nFinding logic errors\n\nLogic errors are more difficult to find because there's nothing actually incorrect with the code you wrote, it just does\nsomething other than what you want it to do.\n\nAn easy way to find where a logic error is in the code is to make use of the say or tellraw command. These commands\nwill send any message to the chat, making it easy for you to know when and if your code actually runs **as you\nexpect it to**. You can easily put a say Function ran correctly command in your function - If the\nfunction runs, then it will send a message to the chat. It will also send the **name of the entity that ran the\nfunction** to the chat, so you can see if your function is executed by the correct entity.\n\nSimilarly, you can use the tellraw command for more advanced debugging. The tellraw command also has the capability to\nshow you the value of scoreboards and NBT values, so you can check what data your code is using. For instance, if you\nwant to check the value of a scoreboard, you could use the following command:\n\ntellraw @a {\"score\":{\"name\":\"@s\",\"objective\":\"some_scoreboard_objective\"}}\n\nBased on the output of these commands in chat, you can use this to tell where your code goes wrong. (Just make sure to\nremove them after you've found the error, otherwise it can get annoying).\n\nYou may want to keep the debug messages in the datapack, but you don't want it to be sent to every player. Fortunately\nfor us, with the tellraw command, you can specify to who the message will be sent. This means you could only send the\ndebug messages to those who have the tag debug:\n\ntellraw @atag=debug] {\"text\":\"Debug message sent only to people with the debug tag!\"}\n\nDebugging logic errors\n\nUnfortunately, debugging logic errors in your code isn't as easy as fixing one spelling mistake. But yet there are still\ntechniques that we can use.\n\nOne way to solve logic errors is to recreate the error in a separate project. When you remove all the other context of\nthe pack, you can focus just on the bit which doesn't work. You can just copy out the code you want to fix into a\nseparate datapack, then fix it there. Once you've identified and fixed the problem, you'll know how to fix it in the\nreal project.\n\nSummary\n\nThe first main method for debugging datapacks is using Minecraft's output logs, we've already learnt how to use those in\nthe first part of this guide. The second method is using the in-game commands, like /say and /tellraw to print\ninformation in real-time about how your datapack works. But those are not the only ones, you can use the\n/scoreboard objectives setdisplaycommand to show the values of a scoreboard on your screen in real-time,\nor you can use /data get ..., which will print the value of any NBT data in chat.\n\nA scoreboard on screen\n\nYou might also find that some other methods that suit you the best, for example you might find the\n[Data Reload mod useful for displaying errors in chat, or a completely different\nmethod, that is up to you.","description":"Sometimes your datapack won't work, and you will have to figure out what exactly doesn't work in them. And this guide will help you with exactly that!","url":"/guide/misc/debugging/","tags":[]},{"title":"Raycasts","content":"Raycasting\nRaycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the\nplayer is looking at and do something to it, such as spawning an explosion.\n\n\nThis tutorial uses a neat thing called a recursive function. A recursive function is a function that runs itself over and over again.\n\n\nThis method works due to a special behaviour of Minecraft functions - functions are always run at a position and rotation. THis means that we can run a function at a postition, move it forward in the direction, and run it again, over and over again. This is how we can make a raycast.\n\nMethod\nThis method will show you how to find what entity that a player is looking at. This is useful for many reasons - if you wanted to make a gun datapack, you'd need to damage the entity that a player is looking at in order to damage them.\n\nTo do this, you have to run a recursive function which will start at the eyes of the player and keep running itself\n0.1 blocks forward until it hits an entity. When it does hit an entity, you can easily get the entity and do\nsomething to it.\n\nFirstly, we'll make the function which, when you run it, will start the raycast. In this function, we'll want to:\n\nset the maximum distance for the raycast, so it won't go on forever if it never hits an entity.\nrun the function at the eyes of the player\n\nTo set a maximum distance, we store the maximum amount of times we want the function to run in a scoreboard. Every time the recursive function runs, we want to subtract one from that scoreboard, and only continue if the score is more than 0.\n\nFirst, you need to create a scoreboard in your load function. This scoreboard will store the maximum amount of times the raycast function can run:\n\nCreate the scoreboard\nscoreboard objectives add raycast dummy\n\nThen, when we want to start the raycast, we just do the following:\nTag the entity or player that starts the raycast, so we can refer back to them.\nSet the maximum distance for the raycast.\nCall the raycast function in the facing direction.\nRemove the tag at the end, so it doesn't interfere with other raycasts.\n\nTag the raycaster\ntag @s add raycaster\n\nSet the maximum distance\nscoreboard players set .raycastLimit raycast 1000\n\nBegin the raycast function\nexecute at @s anchored eyes positioned ^ ^ ^.1 run function :raycast\n\nRemove the tag from the raycaster\ntag @s remove raycaster\n\nIn the raycast function, we just want to check if the function has hit an entity, and if not, run it again until it does, hits a wall, or reaches the raycasts limit, moving slightly each time.\n\nThe next step is a bit more complex. We execute a command as every entity that is not the caster and whose hitbox intersects with the current path of the raycast (using virtual volumes). The command will return run :hit if the raycast hits an entity. The return run will stop the raycast from running further, and then will run the hit function as the entity it has hit.\n\nThe last command checks if the raycast hit a wall. If it does, the raycast will end. If it doesn't, it will then check\nif the limit is reached, again ending if it is. Should the limit not be reached yet, it will move 0.1 blocks forward and\ncall the raycast function again (recursion).\n\nRemove one from the raycast limit\nscoreboard players remove .raycastLimit raycast 1\n\nOptional: display a particle\nparticle minecraft:flame\n\nCheck if the raycast has hit an entity's hitbox\nexecute positioned -.99 -.99 -.99 as @e[dx=0,tag=!raycaster] positioned .99 .99 .99 as @s[dx=0] run return run function :hit\n\nIf the raycast has not hit a wall, and the limit has not been reached, move the raycast forward and run the function again\nexecute if block~ #minecraft:replaceable if score .raycastLimit raycast matches 1.. positioned ^ ^ ^0.1 run function :raycast","description":"Raycasting is when we shoot a line from the player's eyes in the direction they are looking. We use this to get what the player is looking at, and do something to it, such as spawning an explosion.","url":"/guide/misc/raycasts/","tags":[]},{"title":"Slowcast","content":"Slowcasting\n\nA Slowcast is similar to a raycast, but unlike a standard Raycast, it is not instant.\n\nIn some cases it is enough to use a simple tp command that teleports a marker a bit forward every tick. If you wanted it\nto move faster, however, you have to increase the distance it teleports and this could result in skipping over entities\nor blocks you might want to detect.\n\nA slowcast solves this problem by teleporting multiple times within a single tick to travel faster but still checking if\nit hits something on its way.\n\n\nThis tutorial uses a thing called a recursive function. A recursive function is a function that runs\nitself over and over again.\n\n\nSlowcasting to an entity\n\nThis method shows you how you can create and shoot a slowcast to detect entities on its way.\n\nSlowcasts can be useful if you want to create fast but not instantaneous moving projectiles for magic spells for\nexample.\n\nTo make a slowcast, you need:\n\nset up a projectile with all the data it needs\na duration function to manage the travel distance\na step function that teleports the projectile and checks if it hit something\na temporary loop that calls the step function for all active projectiles.\n\nLet's start by creating all the necessary scoreboards in the load function.\n\nscoreboard objectives add temp dummy\nscoreboard objectives add slowcast.steps dummy\nscoreboard objectives add slowcast.duration dummy\n\nThe next step is to initialize the projectile. This is done by running the following function as and at the player. It\nsummons a new marker entity (any other entity works too) and runs the setup function as that entity.\n\nexecute anchored eyes positioned ^ ^ ^.3 summon minecraft:marker run function :setup\n\nSadly it is not possible to add nbt data in the summon sub-command so we have to add it in the setup function too. We\nwill give it a tag that marks it as a slowcast projectile. After that, we set all the scores it needs to function\nproperly. In this example, you will see that instead of setting the scores directly it copies from temporary\nscoreboards. This is so that the values are not hardcoded and can be different for different projectiles without having\nto create a new setup function for each projectile. At the end, we then call the temporary loop function.\n\ntag @s add slowcast\n\nscoreboard players operation @s slowcast.steps = maxSteps temp\nscoreboard players operation @s slowcast.duration = duration temp\n\nfunction :temp_tick\n\nThe projectile is all set up and the loop function is called. The loop function is the part of this whole system that\nkeeps everything running as long as there are active slowcast projectiles.\n\nexecute as @etype=marker,tag=slowcast,scores={slowcast.duration=1..}] at @s run function :duration\n\nexecute if entity @n[type=marker,tag=slowcast] run schedule function :temp_tick 1t\n\nNow the actual slowcast logic which handles the movement, travel distance, and hit detection.\n\nIn the looping function the duration function is called, let's make this one first. This function is responsible for the\nslowcasts travel distance and calling the step function for the actual movement.\n\ndecrease the duration score\nstores the projectile step count in a temporary scoreboard\ncalls the step function 0.2 blocks further in the facing direction\nkill the projectile should it have a distance score of below 1 at the end of the function\n\nscoreboard players remove @s slowcast.duration 1\n\nscoreboard players operation steps temp = @s slowcast.steps\nexecute positioned ^ ^ ^.1 run function :step\n\nexecute unless score @s slowcast.duration matches 1.. run kill\n\nIn the called step function we handle the teleportation between the current and target position and check if the\nprojectile has hit something on its way there.\n\ndecrement the step score in the temporary scoreboard _(we still need the step score stored in the projectile for the\nnext time we call the step function)_\nmake some particles for the visuals (you could replace the particle command with another function call that does more\ncomplex stuff)\nexecute a command as every entity (excluding entities with the slowcast tag and players) whose hit box intersects\nwith both [virtual volumes run the hit\nfunction and kill the projectile.\ntp the projectile to the current position _(until now it only executed the command at this position but is still 0.1\nblock further back)_\nexecute this function again one 0.1 block step forward should the temporary step counter still be over 1\n(recursion)\n\nscoreboard players remove steps temp 1\n\nparticle flame~ .1 .1 .1 0 1\n\nexecute as @e[type=!player,type=!marker,dx=0] positioned -.99 -.99 -.99 if entity @s[dx=0] positioned .99 .99 .99 unless function :hit run kill @n[tag=slowcast]\n\ntp~\n\nexecute if score slowcast.steps temp matches 1.. positioned ^ ^ ^.1 run function :step\n\nThe hit function called in the hit detection does whatever you want it to do when hitting an entity. It could spawn an\nexplosion, apply an effect, or simply deal some damage. \n\nWhen you make the hit function have a successful return\nvalue, it will not kill the projectile in the step function. You could use this to make a piercing projectile for\nexample.\n","description":"Like a raycast but in slow. Useful if simply using tp every tick skips over too much when making it fast.","url":"/guide/misc/slowcasts/","tags":[]},{"title":"Recipes for your Custom Items","content":"Creating Custom Items\nIn this guide, we will go over the basics explaining how custom items work, as well as how to make your own using item components. This guide will not go over how to give your custom items a texture or model.\n\nSince 1.21, it has been easy to create custom items in Minecraft. 1.21 introduced item components, which are like tags you can put on items to change their appearance or functionality. This is the basis for how custom items work - we take an item which already exists, then add or remove item components from that item to give it the desired feel and functionality.\n\nIn this guide we will create a custom edible item which can mine sand instantly and makes the player glow who eats it.\n\nHow do custom items work?\nCustom items are items with a unique set of item components to change their appearance and functionality. As of 1.21, we cannot create fully custom items - instead, we need to take an item which exists, and add, remove, or edit their item components to customise it. \n\nItem components cannot cover every desired functionality. An example of this is doing something when the item is right clicked. We still have to use workarounds for this, such as giving the item a food component to make it edible, then detecting when a player starts eating it. You can read more about this in our right click detection summary.\n\nCreating our custom item\nWe are going to create a custom item with the following properties:\nIt can mine sand very quickly\nIt is edible, and players who eat it will start glowing\nIt will be called Sandy McDesertface\n\nWe will use item components to give the item those properties. Item components are put after the item in our item's give command. For example:\n/give @s flint[minecraft:item_name=\"Sharp Rock\"]\nThese are all the item components which we are going to use.\n\n| Property | Component needed | Our component |\n| - | - | - |\n| Mines sand very quickly | minecraft:tool is used to make items mine different blocks quickly | [tool={default_mining_speed:1.5,damage_per_block:0,rules:[{blocks:\"minecraft:sand\",speed:100}]}] |\n| Is edible, makes the player glow | minecraft:consumable makes items edible. We can also use it to specify an effect for the player to recieve. | [consumable={on_consume_effects:[{type:\"minecraft:apply_effects\",effects:[{id:\"minecraft:glowing\",amplifier:1,duration:100}]}]}] |\n| Gives the player saturation and nutrition stats on consumption | minecraft:food gives the player saturation and nutrition after consuming it. | [food={nutrition:3,saturation:1,can_always_eat:true}] |\n| Is called Sandy McDesertface | minecraft:item_name overrides our item name. | [item_name=\"Sandy McDesertface\"] |\n\nCombining all of these together, we can create a give command for our custom item:\n/give @s stick[tool={default_mining_speed:1.5,damage_per_block:0,rules:[{speed:100,blocks:\"sand\"}]},food={nutrition:3,saturation:1,can_always_eat:true},consumable={on_consume_effects:[{type:\"minecraft:apply_effects\",effects:[{id:\"minecraft:glowing\",amplifier:1,duration:100}]}]},item_name='\"Sandy McDesertface\"'] 1\n\nminecraft:stick can be any item you want. All custom items need to be based on an existing item. We do not yet have the functionality to create our own item IDs. However, we can make use of the custom_model_data (or custom_model in recent snapshots) component to change the model or texture of the item.\n","description":"Learn how to make custom items with Minecraft Java datapacks","url":"/guide/adding-new-features/custom-items/intro/","tags":["beginner","guide","custom_items","item_components"]},{"title":"Recipes for your Custom Items","content":"Creating Recipes for your Custom Items\n\nThere are two ways to add recipes to your custom items, they differentiate based on what Minecraft version you are\ndeveloping for. The first one is for the Minecraft version 1.20.5+ (Datapack format 34+), here items can be directly\nspecified in the output with item components. The second method is for all version\nbefore 1.20.5.\n\n1.20.5 and newer\n\nThis is the easier method of the two, only requiring you to put the item id and components into the recipe output.\n\n\nNote that there is currently no way to specify item components in the recipe's input items, only in the result.\nMeaning your custom item can't (easily) be crafted out of different custom items.\n\n\nThe instructions here will be very simple, requiring you to only create one file, that being the actual crafting recipe\nfile. This file can be named whatever, but has to end in the .json file format.\n\nHere is an example of a recipe with the output of a custom item:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"id\": \"minecraft:iron_pickaxe\",\n\"count\": 1,\n\"components\": {\n\"minecraft:tool\": {\n\"rules\": [\n{\n\"blocks\": \"minecraft:turtle_egg\",\n\"speed\": 6,\n\"correct_for_drops\": true\n}\n],\n\"default_mining_speed\": 3,\n\"damage_per_block\": 1\n},\n\"minecraft:item_name\": \"{\\\\\\\"text\\\\\\\":\\\\\\\"sCUTE-axe\\\\\\\"}\"\n}\n}\n}\n\nIn the example, you can see that the result has a \"components\" field, where you can list the components that your\ncustom item should have. I can also recommend a useful site for generating recipes with specified components:\nhttps://misode.github.io/recipe/\n\n1.20.4 and below\n\n**This part of the guide assumes that you already knowledge some basic commands and how crafting recipes and\nadvancements work.**\n\nTo create a crafting recipe for one of your custom items, you need just a little bit more than for a normal recipe. This\nis because of the fact that you couldn't use NBT in recipes before 1.20.5 dropped, so that's why we need a small\nworkaround.\n\nLets create the recipe first:\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"ttt\",\n\" s \",\n\" s \"\n],\n\"key\": {\n\"t\": {\n\"item\": \"minecraft:turtle_scute\"\n},\n\"s\": {\n\"item\": \"minecraft:stick\"\n}\n},\n\"result\": {\n\"item\": \"minecraft:knowledge_book\"\n}\n}\n\nAs mentioned before, we can't use the custom item as output, so we use the knowledge book as a placeholder.\n\nTo switch the knowledge book with our custom item, we need an advancement to react when we craft the recipe. For this we\nuse the recipe_crafted trigger. _With some trickery, here it is also possible to make the ingredients require certain\nnbt._\n\n{\n\"criteria\": {\n\"requirement\": {\n\"trigger\": \"minecraft:recipe_crafted\",\n\"conditions\": {\n\"recipe_id\": \":scuteaxe\"\n}\n}\n},\n\"rewards\": {\n\"function\": \":craft_scuteaxe\"\n}\n}\n\nLastly we have to make the actual function that handles the item switching. You can either use a give command or, what\nI recommend more, define the item in a separate loot table and then use the loot command.\n\nclear @s knowledge_book\nadvancement revoke @s only :craft_scuteaxe\nAny code can go here, this will run when the player crafts the item.\nloot give @s loot :\nYou can also you a give command here instead\n\n\nIf you want to create more recipes, you can just copy, rename and configure all the files we've just created.\n\n\nAnd that's it, you should now have a custom working recipe for your item.","description":"Learn how to make custom crafting recipes for custom items in Minecraft Datapacks.","url":"/guide/adding-new-features/custom-items/crafting/","tags":[]},{"title":"Adding Smithing Trims","content":"How to add custom Smithing Trims\r\n\r\nThis guide is split into three parts, adding a custom smithing trim pattern, adding a custom smithing trim color palette and adding a custom trimmable item. These parts can be seperately without following each other.\r\n\r\n\r\nThis guide requires you\r\nto have at least a small understanding of datapacks. If you don't understand this guide, you can read the Getting Started\r\nguide. \r\n\r\n\r\nTo start you will need a basic datapack, if you don't know how to make one, see the\r\nGetting Started guide.\r\nAdding a smithing trim pattern\r\nSetting up the datapack - Smithing Trim Pattern\r\n\r\nTo start, we are going to create the main trim pattern file in the directory data/ /trim_pattern/.\r\nYou can name the file whatever you want, but it has to be in the .json file format. For the purposes of this tutorial, we're\r\ngoing to call it example_pattern.json. Inside, we will put and configure these settings:\r\n\r\n`json:example_pattern.json\r\n{\r\n\"asset_id\": \":example_template\",\r\n\"description\": \"Example Trim\",\r\n\"decal\": false\r\n}\r\n`\r\n\r\nThis is a run-down of the fields in that file:\r\ndescription: A text component to use as this trim's description name.\r\nasset_id: The resource location which is used in the resourcepack.\r\ndecal: Whether or not the pattern texture should be masked based on the underlying armor. Optional, defaults to false.\r\n\r\nIf you are not sure what to put in asset_id, don't worry, the resource pack part is going to focus on that!\r\n\r\nNow, we are going to add the recipe file into data/ /recipe/. You can see more about the recipe's format here.\r\n\r\n`json:example_armor_trim.json\r\n{\r\n\"type\": \"minecraft:smithing_trim\",\r\n\"addition\": \"#minecraft:trim_materials\",\r\n\"base\": \"#minecraft:trimmable_armor\",\r\n\"template\": \"minecraft:diamond_block\",\r\n\"pattern\": \":example_template\"\r\n}\r\n`\r\n\r\nHere we have to specify the template item which is going to be used for the pattern, and the trim pattern ID itself.\r\nFinishing up with the resourcepack - Smithing Trim Pattern\r\n\r\nTo finish off, we'll need to add the actual definition for all the different colors and armor types. This can be done by changing the armor trim's atlas file. This file can be found in assets/minecraft/atlases/armor_trims.json. Please note that the exact spelling and the use of the Minecraft namespace is required here!\r\n\r\n`json:armor_trims.json\r\n{\r\n\"sources\": \r\n{\r\n\"type\": \"minecraft:paletted_permutations\",\r\n\"textures\": [\r\n\":trims/entity/humanoid/example_template\",\r\n\":trims/entity/humanoid_leggings/example_template\"\r\n],\r\n\"palette_key\": \"trims/color_palettes/trim_palette\",\r\n\"permutations\": {\r\n\"quartz\": \"trims/color_palettes/quartz\",\r\n\"iron\": \"trims/color_palettes/iron\",\r\n\"gold\": \"trims/color_palettes/gold\",\r\n\"diamond\": \"trims/color_palettes/diamond\",\r\n\"netherite\": \"trims/color_palettes/netherite\",\r\n\"redstone\": \"trims/color_palettes/redstone\",\r\n\"copper\": \"trims/color_palettes/copper\",\r\n\"emerald\": \"trims/color_palettes/emerald\",\r\n\"lapis\": \"trims/color_palettes/lapis\",\r\n\"amethyst\": \"trims/color_palettes/amethyst\",\r\n\"iron_darker\": \"trims/color_palettes/iron_darker\",\r\n\"gold_darker\": \"trims/color_palettes/gold_darker\",\r\n\"diamond_darker\": \"trims/color_palettes/diamond_darker\",\r\n\"netherite_darker\": \"trims/color_palettes/netherite_darker\",\r\n\"resin\": \"trims/color_palettes/resin\"\r\n}\r\n}\r\n]\r\n}\r\n`\r\n\r\nAnd now to finish, we'll need the actual trim textures. These should be grayscale images using the same colors as textures/trims/color_palettes/trim_palette (can be seen below).\n\nThese black-and-white colors will be automatically replaced by the game when a trim color palette is applied. \r\nAn example file of/textures/trims/entity/humanoid/example_template and/textures/trims/entity/humanoid_leggings/example_template can also be found below.\n\nOnce you save the above files, you need to reload the resource pack with the keybind F3 + T\r\nin-game. You will also need to leave and rejoin the world to update the datapack.\r\n\r\n\r\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\r\n\r\nAdding a smithing trim material\r\nSetting up the datapack - Smithing Trim Material\r\n\r\nFor this example, we are going to add a new trim color palette. To start, we are going to create the main trim color palette file in the directory data/ /trim_material/.\r\nOnce again, you can name the file whatever you want, but it has to be in the .json file format. For the purposes of this tutorial, we're\r\ngoing to call it matexample.json. Inside, we will put and configure these settings:\r\n\r\n`json:matexample.json\r\n{\r\n\"asset_name\": \"matexample\",\r\n\"description\": {\r\n\"text\": \"Example Material\",\r\n\"color\": \"#00e09d\"\r\n}\r\n}\r\n`\r\n\r\nThis is a run-down of the fields in that file:\r\ndescription: A text component to use as this trim's material description name.\r\nasset_name: The resource location which is used in the resourcepack.\r\noverride_armor_materials: A list of optional armors which should have a different color palette. (E.g. Gold trim on gold armor has a darker color palette.)\r\n\r\nNext, we are going to add the ingredient item to the #minecraft:trim_materials item tag. This ensures the item can be used as an ingredient in the smithing table. This file is located in data/minecraft/tags/item/. Please note that the exact spelling and the use of the Minecraft namespace is required here!\r\n\r\n`json:trim_materials.json\r\n{\r\n\"values\": [\r\n\"minecraft:barrier\"\r\n]\r\n}\r\n`\r\n\r\nAs of 1.21.5, every item you want to work as a trim material, needs to have the [provides_trim_material item component. So to give ourselfs a barrier which provides our custom trim material, we can use this /give command:\r\n\r\n`mcfunction\r\n/give @s barrierprovides_trim_material=\":matexample\"] 1\r\n`\r\nFinishing up with the resourcepack - Smithing Trim Material\r\n\r\nTo finish off, we'll need to add the material definition in the resourcepack. This can be done by changing the armor trim's atlas file. This file can be found in assets/minecraft/atlases/armor_trims.json. Please note that the exact spelling and the use of the Minecraft namespace is required here!\r\n\r\n`json:armor_trims.json\r\n{\r\n\"sources\": [\r\n{\r\n\"type\": \"paletted_permutations\",\r\n\"textures\": [\r\n\"trims/entity/humanoid/bolt\",\r\n\"trims/entity/humanoid_leggings/bolt\",\r\n\"trims/entity/humanoid/flow\",\r\n\"trims/entity/humanoid_leggings/flow\",\r\n\"trims/entity/humanoid/coast\",\r\n\"trims/entity/humanoid_leggings/coast\",\r\n\"trims/entity/humanoid/sentry\",\r\n\"trims/entity/humanoid_leggings/sentry\",\r\n\"trims/entity/humanoid/dune\",\r\n\"trims/entity/humanoid_leggings/dune\",\r\n\"trims/entity/humanoid/wild\",\r\n\"trims/entity/humanoid_leggings/wild\",\r\n\"trims/entity/humanoid/ward\",\r\n\"trims/entity/humanoid_leggings/ward\",\r\n\"trims/entity/humanoid/eye\",\r\n\"trims/entity/humanoid_leggings/eye\",\r\n\"trims/entity/humanoid/vex\",\r\n\"trims/entity/humanoid_leggings/vex\",\r\n\"trims/entity/humanoid/tide\",\r\n\"trims/entity/humanoid_leggings/tide\",\r\n\"trims/entity/humanoid/snout\",\r\n\"trims/entity/humanoid_leggings/snout\",\r\n\"trims/entity/humanoid/rib\",\r\n\"trims/entity/humanoid_leggings/rib\",\r\n\"trims/entity/humanoid/spire\",\r\n\"trims/entity/humanoid_leggings/spire\",\r\n\"trims/entity/humanoid/silence\",\r\n\"trims/entity/humanoid_leggings/silence\",\r\n\"trims/entity/humanoid/wayfinder\",\r\n\"trims/entity/humanoid_leggings/wayfinder\",\r\n\"trims/entity/humanoid/raiser\",\r\n\"trims/entity/humanoid_leggings/raiser\",\r\n\"trims/entity/humanoid/shaper\",\r\n\"trims/entity/humanoid_leggings/shaper\",\r\n\"trims/entity/humanoid/host\",\r\n\"trims/entity/humanoid_leggings/host\"\r\n],\r\n\"palette_key\": \"trims/color_palettes/trim_palette\",\r\n\"permutations\": {\r\n\"matexample\": \":trims/color_palettes/matexample\"\r\n}\r\n}\r\n]\r\n}\r\n`\r\n\r\nAnd next, we are going to modify assets/minecraft/atlases/blocks.json:\r\n\r\n`json:blocks.json\r\n{\r\n\"sources\": [\r\n{\r\n\"type\": \"paletted_permutations\",\r\n\"textures\": [\r\n\"trims/items/leggings_trim\",\r\n\"trims/items/chestplate_trim\",\r\n\"trims/items/helmet_trim\",\r\n\"trims/items/boots_trim\"\r\n],\r\n\"palette_key\": \"trims/color_palettes/trim_palette\",\r\n\"permutations\": {\r\n\"matexample\": \":trims/color_palettes/matexample\"\r\n}\r\n}\r\n]\r\n}\r\n`\r\n\r\nHere, the key-value pair under permutations should be the same as the asset_name field from the datapack file we created before.\r\n\r\nNow, we will need to create the actual material color palette texture. Since we are using Vanilla's default palette_key, this image needs to have a width of 8 and a height of 1. You can see an example palette below.\r\nThis image should be saved in assets/ /textures/trims/color_palettes/ as matexample.png\n\nNow comes the last and also hardest part, adding the item models and their definition for all the armor pieces. I will only show this on the diamond chestplate but you will have to create a file for every single armor pieces!\r\n\r\nTo do this, create a new file in assets/minecraft/models/item/ called diamond_chestplate_matexample_trim.json, where matexample is the name of your trim material.\r\nInside that file, put this:\r\n\r\n`json:diamond_chestplate_matexample_trim.json\r\n{\r\n\"parent\": \"minecraft:item/generated\",\r\n\"textures\": {\r\n\"layer0\": \"minecraft:item/diamond_chestplate\",\r\n\"layer1\": \"minecraft:trims/items/diamond_chestplate_matexample_trim\"\r\n}\r\n}\r\n`\r\n\r\nAnd inside assets/minecraft/items/diamond_chestplate.json put and configure this:\r\n\r\n`json:diamond_chestplate_matexample_trim.json\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:select\",\r\n\"cases\": [\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_quartz_trim\"\r\n},\r\n\"when\": \"minecraft:quartz\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_iron_trim\"\r\n},\r\n\"when\": \"minecraft:iron\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_netherite_trim\"\r\n},\r\n\"when\": \"minecraft:netherite\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_redstone_trim\"\r\n},\r\n\"when\": \"minecraft:redstone\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_copper_trim\"\r\n},\r\n\"when\": \"minecraft:copper\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_gold_trim\"\r\n},\r\n\"when\": \"minecraft:gold\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_emerald_trim\"\r\n},\r\n\"when\": \"minecraft:emerald\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_diamond_trim\"\r\n},\r\n\"when\": \"minecraft:diamond\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_lapis_trim\"\r\n},\r\n\"when\": \"minecraft:lapis\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_amethyst_trim\"\r\n},\r\n\"when\": \"minecraft:amethyst\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_resin_trim\"\r\n},\r\n\"when\": \"minecraft:resin\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate_matexample_trim\"\r\n},\r\n\"when\": \":matexample\"\r\n}\r\n],\r\n\"fallback\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_chestplate\"\r\n},\r\n\"property\": \"minecraft:trim_material\"\r\n}\r\n}\r\n`\r\n\r\nHere, the majority of the file remains the same as default, only the last trim model definition was added.\r\n\r\nOnce you save the above files, you need to reload the resource pack with the keybind F3 + T\r\nin-game. You will also need to leave and rejoin the world to update the datapack.\r\n\r\n\r\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\r\n\r\nAdding a trimmable item\r\nSetting up the datapack - Smithable Item\r\n\r\nThis example will make the diamond_pickaxe a smithable item. This time, the datapack side of things is very simple. We only need to add the diamond_pickaxe to the #minecraft:trimmable_armor item tag, which is located in data/minecraft/tags/item/. Once again, the Minecraft directory is required here.\r\n\r\n`json:trimmable_armor.json\r\n{\r\n\"values\": [\r\n\"minecraft:diamond_pickaxe\"\r\n]\r\n}\r\n`\r\nFinishing up with the resourcepack - Smithable Item\r\n\r\nIn the resourcepack, we'll need to customize the diamond pickaxe's item model definition. This is located inside of assets/minecraft/items/\r\n\r\n`json:diamond_pickaxe.json\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:select\",\r\n\"cases\": [\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_quartz_trim\"\r\n},\r\n\"when\": \"minecraft:quartz\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_iron_trim\"\r\n},\r\n\"when\": \"minecraft:iron\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_netherite_trim\"\r\n},\r\n\"when\": \"minecraft:netherite\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_redstone_trim\"\r\n},\r\n\"when\": \"minecraft:redstone\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_copper_trim\"\r\n},\r\n\"when\": \"minecraft:copper\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_gold_trim\"\r\n},\r\n\"when\": \"minecraft:gold\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_emerald_trim\"\r\n},\r\n\"when\": \"minecraft:emerald\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_diamond_trim\"\r\n},\r\n\"when\": \"minecraft:diamond\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_lapis_trim\"\r\n},\r\n\"when\": \"minecraft:lapis\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_amethyst_trim\"\r\n},\r\n\"when\": \"minecraft:amethyst\"\r\n},\r\n{\r\n\"model\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe_resin_trim\"\r\n},\r\n\"when\": \"minecraft:resin\"\r\n}\r\n],\r\n\"fallback\": {\r\n\"type\": \"minecraft:model\",\r\n\"model\": \"minecraft:item/diamond_pickaxe\"\r\n},\r\n\"property\": \"minecraft:trim_material\"\r\n}\r\n}\r\n`\r\n\r\nNext we will need to create the following file for every single material listed in the file above. All of the files need to be located inside assets/minecraft/models/item/ directory. For the purpose of this guide, i will only create one for the resin material.\r\n\r\n`json:diamond_pickaxe_resin_trim.json\r\n{\r\n\"parent\": \"minecraft:item/generated\",\r\n\"textures\": {\r\n\"layer0\": \"minecraft:item/diamond_pickaxe\",\r\n\"layer1\": \"minecraft:trims/items/pickaxe_trim_resin\"\r\n}\r\n}\r\n`\r\n\r\nYou might have noticed that the file above mentions a pickaxe_trim_resin texture. Fortunately, we do not need to create this texture file as it is generated automatically by the game. But for it to work, we need to create the atlas file inside assets/minecraft/atlases/blocks.json.\r\n\r\n`json:blocks.json\r\n{\r\n\"sources\": [\r\n{\r\n\"type\": \"paletted_permutations\",\r\n\"textures\": [\r\n\"trims/items/pickaxe_trim\"\r\n],\r\n\"palette_key\": \"trims/color_palettes/trim_palette\",\r\n\"permutations\": {\r\n\"quartz\": \"trims/color_palettes/quartz\",\r\n\"iron\": \"trims/color_palettes/iron\",\r\n\"gold\": \"trims/color_palettes/gold\",\r\n\"diamond\": \"trims/color_palettes/diamond\",\r\n\"netherite\": \"trims/color_palettes/netherite\",\r\n\"redstone\": \"trims/color_palettes/redstone\",\r\n\"copper\": \"trims/color_palettes/copper\",\r\n\"emerald\": \"trims/color_palettes/emerald\",\r\n\"lapis\": \"trims/color_palettes/lapis\",\r\n\"amethyst\": \"trims/color_palettes/amethyst\",\r\n\"resin\": \"trims/color_palettes/resin\"\r\n}\r\n}\r\n]\r\n}\r\n`\r\n\r\nNow for the last step, we will need to create the pickaxe_trim texture. This is a black-and-white mask which is applied on-top of the diamond pickaxe when it has a trim applied. Please note that the file has to use the same colors as Vanillas textures/trims/color_palettes/trim_palette (this file can be seen in the [Smithing Trim Pattern chapter.)\r\nThis image has to be located in assets/minecraft/textures/trims/items/ with the name pickaxe_trim.png The texture I used can be found below:\n\nOnce you save the above files, you need to reload the resource pack with the keybind F3 + T\r\nin-game. You will also need to leave and rejoin the world to update the datapack.\r\n\r\n\r\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\r\n","description":"Learn how to add custom smithing trims patterns to Minecraft just with a datapack and a resourcepack!","url":"/guide/adding-new-features/smithing-trims/","tags":[]},{"title":"Adding Paitings","content":"How to add custom paintings\n\nBy the end of this guide, you will be able to implement your own custom paintings, which will show up in the creative inventory.\n\nThis will only work in 1.21+, as custom painting variants were added in the snapshot 24w18a. \n\nThis guide requires you\nto have at least a small understanding of datapacks. If you don't understand this guide, you can read the Getting Started\nguide. \n\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see the\nGetting Started guide.\n\nFirstly, we are going to create the main painting variant file in the directory data/ /painting_variant/.\nYou can name the file whatever you want, but it has to be in the .json file format. For the purposes of this tutorial, we're\ngoing to call it example_painting.json. Inside, we will put and configure these settings:\n\n{\n\"asset_id\": \":example_painting-texture\",\n\"title\": \"Example Painting\",\n\"author\": \"Datapack Hub\",\n\"height\": 1,\n\"width\": 1\n}\n\nThis is a run-down of the fields in that file:\ntitle: A text component to use as this paintings title.\nauthor: A text component to use as this paintings author.\nheight: A value between 1 and 16, represents the height of the painting when placed.\nwidth: A value between 1 and 16, represents the width of the painting when placed.\nasset_id: The resource location of the paintings texture to use. In this example, example:texture_name would direct to assets/example/textures/painting/texture_name.png.\n\nIf you are not sure what to put in asset_id, don't worry, the resource pack part is going to focus on that!\n\nTo finish with the datapack, we are going to have to add the newly created painting into Minecraft's #minecraft:placeable painting variant tag. This will allow the painting to be placed via the Painting item, and to be added to the creative inventory.\nTo do this, create a new file called placeable.json under data/minecraft/tags/painting_variant/placeable.json. Please note that the exact spelling and the use of the Minecraft namespace is required here!\n\n{\n\"values\": [\n\":example_painting\"\n]\n}\n\nFinish off with the Resource Pack\n\nLastly, we are going to add the actual painting texture file. This has to be placed in assets/example/textures/painting/.png This texture, of course, has to have the same dimensions as the width and height you previously entered into the painting variant definition file.\n\nOptionally, you can change the author and title in the datapack definition to use a resourcepack translation file. Which can be added into assets/example/lang/.json under \"painting..example_painting.\".\n\nSee it in action\n\nOnce you save the above files, you need to reload the resource pack with the keybind F3 + T\nin-game. You will also need to leave and rejoin the world to update the datapack.\n\n\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the trick here!\n\n\nYou can either get the painting by using the normal painting item and placing it into a 1x1 spot, or by searching for \"Example Painting\" in the creative inventory.","description":"Learn how to add custom paitings to Minecraft just with a datapack and a resourcepack!","url":"/guide/adding-new-features/painting-variants/","tags":[]},{"title":"Adding Jukebox Songs","content":"How to add custom jukebox songs\n\nIn this guide, we will not only learn how to create custom jukebox songs, but also how to give yourself a custom music\ndisc item and implement custom sounds!\n\nThis will only work in 1.21+, as custom jukebox songs were added in the snapshot 24w21a. \n\nThis guide requires you\nto have at least a small understanding of datapacks, if you don't understand this guide, you can read the Getting Started\nguide. \n\n\nSetting up the datapack\n\nTo start you will need a basic datapack, if you don't know how to make one, see the\nGetting Started guide.\n\nFirstly, we are going to create the actual jukebox song file in the directory data/ /jukebox_song/.\nThe file can be named whatever, but it has to be in the .json file format. For the purposes of this tutorial, we're\ngonna call it example_jukebox_song.json. Inside, we will put and configure this:\n\n{\n\"comparator_output\": 13,\n\"description\": {\n\"text\": \"ARTIST - SONG NAME\"\n},\n\"length_in_seconds\": 69.0,\n\"sound_event\": {\n\"sound_id\": \":\"\n}\n}\n\nThis is a run-down of the fields in that file:\n\ncomparator_output: A value between 1 and 15, representing the redstone output when a comparator is placed next to\nthe jukebox playing this song.\ndescription: The description of the enchantment (should be a JSON text component).\nlength_in_seconds: The length of the song (in seconds)\nsound_event: The ID of the sound (from the resource pack) to play.\n\nIf you don't understand what to put in sound_event, don't worry, the next part is going to focus specifically on this!\n\nAdding custom music - Resource Pack\n\nThis part is going to be optional in the case, that you only want a vanilla Minecraft sound to play from the jukebox. In\nthat case, change the sound_id in the example_jukebox_song.json file from the datapack to the sounds ID. (for\nexample: \"sound_id\": \"minecraft:music_disc.cat\").\n\nIf you don't want to use a default Minecraft sound, then a resource pack is required to add the custom sound (in this\ncase, the music on the disc) to Minecraft, so that the datapack can read it.\n\n\nMinecraft handles sound in .ogg files. There are many different converters you can use to convert an MP3, WAV,\nor other audio file to .ogg.\n\n\nYou need to add your .ogg file (the audio of your music disc) to assets/ /sounds/.ogg. Make sure\nthatandare the same values you put in the datapack's JSON file (the\nexample_jukebox_song.json file in our case).\n\nThen, if you haven't already, you need to create a sounds.json file at the position assets/ /sounds.json.\nThis file tells Minecraft what audio files map to what IDs. Put this inside:\n\n{\n\"music_disc.\": {\n\"sounds\": [\n{\n\"name\": \":\",\n\"stream\": true\n}\n]\n}\n}\n\nSee it in action\n\nOnce you save the above files, you need to activate the resource pack with the keybind F3 + T\nin-game. You will also need to leave and rejoin the world to update the datapack.\n\n\nFor this to work, you will need to leave and rejoin the world, just using the /reload command won't do the\ntrick here!\n\n\nTo get the music disc, you need to get an item which has the minecraft:jukebox_playable component. This can be any\nitem - it doesn't have to necessarily be an already existing music disc (but you can if you want)\n\ngive @s minecraft:YOUR_ITEM[minecraft:jukebox_playable={song:\":example_jukebox_song\"}]\n\nThen, you can use this item on a jukebox, and it should start playing your song!","description":"Learn how to create custom music discs and custom jukebox songs with Minecraft datapacks","url":"/guide/adding-new-features/jukebox-songs/","tags":[]},{"title":"MCFunction vs Coding","content":"MCFunction vs Traditional Coding\n\nMany people will join the datapack community with experience with traditional programming languages. While this can be\nhelpful for understanding topics, there are a lot of differences between the two, many of which can seem confusing when\nyou are used to a more traditional programming language. In this guide we touch on some common questions and problems people run into when\ntrying to apply traditional coding logic to MCFunction.\n\nQ: How do you do variables in MCFunction?\n\nMCFunction isn't like most programming languages, MCFunction uses scoreboards, storages and macros (1.20.2+) as their variables.\n\nScoreboards are like a table. They store a name and a value which you can then retrieve and modify later. You can use both entity names/UUIDs and \"fake player\" \nnames (names not associated with any player), allowing for easy combination of variables and entity scores. Scoreboards can only hold 32-bit integers and other data \ntypes (such as floats, doubles or strings) can not be stored this way.\n\nStorages are a way of storing NBT data without attaching it to an entity or block. Storages are stored globally per \nworld and unlike scoreboards, don't need to be initialized beforehand. Unlike entity and block NBT, storages have no fixed structure, and can contain whichever \narbitrary keys are added to it.\n\nMacros are like fancy string templating, when a function is supplied with macros, it will go through the function file\nand replace the macro with its value (block, entity, storage). Interestingly, this also works function-wide, meaning you could use them as mock arguments.\n\n\nMacros can be significantly slower than other methods, it is best to only use them when necessary or in non-performance-critical code.\n\n\nBelow are some examples of their usage:\n\nScoreboards\ncreates a new table called storage\n(dummy means it does not track any statistic)\nscoreboard objectives add storage dummy\n\nadds a fake player named \"$steps\" to storage (using prefix \"$\" to avoid collisions with real players, good practice)\nscoreboard players set $steps storage 41\n\nsets the value of a player to 42\nscoreboard players set Cbble_ storage 42\n\nMacros\nRun cool function with a macro\nfunction dph:cool_function with block~ Items\nfunction dph:cool_function with entity @etype=minecraft:squid,limit=1,sort=nearest] CustomName\nfunction dph:cool_function {Potato:true}\n\nUsage with entity NBT:\nexecute as @p run dph:cool_function with entity @s SelectedItem\n\nthis is in the dph:cool_function function\n$say The player running this function is holding $(count) items with ID $(id)!\n\nStorages\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage example:main compound.array append value 42\n\n(Get more info on storages on [the wiki page)\n\nQ: How do you loop in MCFunction?\n\nLooping in most cases is done with 1 of 2 methods, depending on the use case:\n\nRecursive Function Calls: This is when a function calls itself which will loop until some end condition is met, or forever, if one is never met.\nTick Functions (#minecraft:tick): This is a special tag you can declare that will run every function declared in it every tick, it is best\npractice to only have one of these function in a datapack at a time.\n\nQ: How do you make functions/methods?\n\nEvery MCFunction file is its own function which you can run with the function command. MCFunction does not support inheritance and inherited functions, \nbut you can call any function from anywhere in your datapack.\n\nfunction ...]\n\nQ: How do I do conditionals?\n\nYou can also do some basic conditionals with [selectors, but most if not all conditionals are done with the \nexecute if subcommand, which accepts a variety of different inputs and check if they match/are equal. \nYou can learn more about execute if on the execute page.\n\nQ: How do you do math/expressions?\n\nMCFunction does math in an interesting way; it uses scoreboard operations in order to do math. Using the scoreboard players operation subcommand, you can do a \nvariety of math operations.\n\n\nMCFunction does not come with complex math like trigonometry, absolutes, a pre-defined Pi, or even square root! These all must be implemented either by \nhand or with a third-party library.\n","description":"Learn the differences between using MCFunctions and traditional coding.","url":"/guide/mcf-vs-code/","tags":[]},{"title":"Resources","content":"Resources\nListed here are links to credible and reliable places and libraries to aid in command/datapack support and creation. \n\n\nThis wiki is run by Datapack Hub. We aren't responsible for the content on external sites or Discord Servers, so proceed with caution. However, they're all safe to use and have amazingly useful content and tools for creating Minecraft Datapacks.\n\n\nCommunities\nDiscord Datapack Hub - Get help with Minecraft Datapacks, resource packs, commands and more.\nWebsite Smithed - A general (but non-help) datapack community for sharing projects.\nDiscord Minecraft Commands - Get help with Java datapacks/commands or Bedrock addons.\nDiscord ShaderLABS - Get help with vanilla shaders.\nDiscord Blockbench - Support for the Blockbench (3D model editor) app.\nDiscord FabricMC - Get help with Fabric and Fabric mods.\nDiscord Minecraft - Discuss Minecraft generally with people from around the world.\nDiscord Animated Java - Support for the Animated Java Blockbench plugin.\nDiscord Dataworld (French) - A French discord server for help with datapacks.\nDiscord Anthill (Russian) - A russian-speaking discord server for help with datapacks, resource packs and commands.\n\nGenerators\nWebsite MCStacker - Generate commands such as /summon, /give, and more.\nWebsite Misode - Generate files such as advancements, predicates, recipes, worldgen, and more.\nWebsite TheDestruc7i0n Recipe Generator - Generate simple recipes.\nWebsite Minecraft JSON - Generate JSON Text.\nWebsite Block Display Engine - Create models with display entities and export as commands.\nWebsite haselkern's ArmorStand - Generate summon commands for armor stands in any pose.\n\nTools\nTool Easy Map Updater - A toolset for automatically updating Minecraft maps (including datapacks) to the latest version.\nTool Weld - The fastest data and resource pack merger in the west.\n\nTemplates/Reference\nWebsite Minecraft Wiki - A detailed technical wiki covering all Minecraft mechanics.\nWebsite Misode's MCMeta - A GitHub repository with every vanilla file (compiled by Misode).\nWebsite inventivetalent's Minecraft assets - Website with every vanilla file.\nWebsite CCCode's version-diff - Shows all the differences in vanilla files between two versions.\nWebsite Misode's Tick Order - A detailed sequence of events that occur during a Minecraft server tick.\n\nTutorials/Content Creation\nYouTube Cloud Wolf - Datapack tutorials, especially advanced concepts.\nYouTube Slicedlime - Covers all the technical changes in recent snapshots.\nYouTube Conure - Small, but informative datapack tutorials.\nYouTube Legitimoose - Easy to understand datapack and command tutorials.\nPMC Guide Structure Generation Guide\nPMC Guide World Generation Guide\nWebsite MCC's FAQs - A list of common questions along with tutorials for answers.\n\nLibraries\nLibrary TagLib - A curated list of useful tag files.\nLibrary Smithed (Libraries) - A collection of useful technical and compatibility libraries.\nLibrary Player Motion - Allows manipulating player's motion.\nLibrary Blockstate - Extracts the BlockState data of any block at given position.\nLibrary Bookshelf - A user-friendly modular library datapack with lots of useful modules.\nLibrary Iris - A raycasting library with micrometric precision and taking into account individual block geometries.\nLibrary AjjGUI - A Data-Driven GUI library.\nLibrary Mcfunction Logger - A library for logging things to the server console.\nLibrary Moxvallix's Library - The ultimate Minecraft Datapack Library, constantly updated with new helpful functions.\n\nMods\nMod Datamancer - A tool for datapack devs with several features, such as function profiling & benchmarking, marker goggles, datapack autoreloading and more.\nMod Datapack debugger - Set breakpoints in the functions to \"freeze\" the game when the breakpoint is reached.\nMod Better Suggestions - Provides more/better suggestions for Minecraft commands.\nMod NBT Autocomplete - Adds suggestions for NBT tags in commands.","description":"Listed here are links to credible and reliable places to aid in command support and creation.","url":"/resources/","tags":[]},{"title":"Recipes","content":"Recipes\n\nRecipes are files which define crafting recipes in-game. They can be used to add new recipes, or overwrite existing\nones.\nRecipes are JSON files located in the data/ /recipe folder.\n\nJSON format\nFor information about the JSON format in general, see the JSON page.\n\nSince recipe files represent a variety of different recipe types, the format can vary. However, there are some fields\nwhich appear in every recipe file.\n\ntype\n\nDetermines which type of recipe this is. Possible values:\n\n| Type | Description |\n| -----| ----------- |\n| blasting| A recipe for a blast furnace |\n| campfire_cooking| A recipe for cooking items on a campfire |\n| crafting_shaped| A shaped crafting recipe in a crafting table. Ingredients must be placed in the correct pattern to craft |\n| crafting_shapeless| A shapeless recipe in a crafting table. Ingredients can be placed in any pattern to craft |\n| crafting_special_*| A crafting recipe handled using built-in logic, and not displayed in the recipe book. Only useful for disabling/enabling certain recipes |\n| crafting_decorated_pot | The recipe for crafting decorated pots. Also handled with built-in logic, but does show up in the recipe book |\n| crafting_transmute| A recipe to turn one item into another in a crafting table, while preserving its item components |\n| smelting| A recipe for a furnace |\n| smithing_transform| A recipe to upgrade an item in a smithing table |\n| smithing_trim| A recipe to add an armor trim to an item in a smithing table |\n| smoking| A recipe for a smoker |\n| stonecutting| A recipe for a stonecutter |\n\ncategory\n\nWhich category the recipe appears in the recipe book. If not provided, defaults to misc.\nPossible values: blocks, building, equipment, food, misc, redstone\n\ngroup\n\nAn identifier to group multiple recipes in the recipe book. For example, recipes to craft planks use this.\nAllowed in most recipe types, except: crafting_decorated_pot, crafting_special_*, smithing_transform,\nsmithing_trim\n\nCooking fields\n\nThese fields are present in blasting, campfire_cooking, smelting and smoking recipes.\n\n| Field | Format | Default value | Description |\n| ----- | ------ | ------------- | ----------- |\n| ingredient| An ingredient | required | The ingredient which gets cooked |\n| result| A single result | required | The result of cooking the ingredient |\n| experience| A number | 0 | The amount of experience gained from this recipe |\n| cookingtime | An integer | 100, or 200 for smelting recipes | The number of ticks it takes to cook the ingredient |\n\n\nThe vanilla recipes range between 0.1 and 1 experience, and take 200 ticks (10 seconds) for smelting, 100 ticks\nfor blasting and smoking, and 600 ticks for campfire cooking\n\n\ncrafting_shaped fields\n\nThese fields are present in shaped crafting recipes.\n\n| Field | Format | Description |\n| ----- | ------ | ----------- |\n| pattern | An array of strings | The pattern for the crafting recipe. Represents rows of the crafting grid. Each row contains up to three characters, each representing an ingredient, spaces can be used to indicate an empty slot. All rows must be of the same length. |\n| key| An object | A map of characters to ingredients. Determines what the characters in pattern represent. Each key is the character which represents it, and the value being an ingredient.|\n| result| A counted result | The result of the recipe |\n\n\nIf the rows are less than three characters long, or there are fewer than three rows, the recipe can be moved\naround the crafting grid. Recipes with two or fewer rows and columns can be crafting in the 2x2 crafting grid in the\ninventory.\n\n\n\nThis can be a bit hard to understand from the description; it may be helpful to read the\nexample to understand it better.\n\n\ncrafting_shapeless fields\n\nThese fields are present in shapeless crafting recipes.\n\n| Field| Format| Description|\n| ------------- | ---------------------------------------------------- | ------------------------------------------ |\n| ingredients | An array of ingredients | The ingredients needed to craft the recipe |\n| result| A counted result| The result of the recipe|\n\ncrafting_special_* fields\n\nThe crafting_special_* recipes don't have extra fields, but there are many possible values of the type field which\ncount as special crafting recipes.\nPossible special recipes:\n\n| Recipe Type| Description|\n| ------------------------------------- | ---------------------------------------------------- |\n| crafting_special_armordye| The recipe for dyeing leather armor|\n| crafting_special_bannerduplicate| The recipe for copying banners|\n| crafting_special_bookcloning| The recipe for copying written books|\n| crafting_special_firework_rocket| The recipe for crafting firework rockets|\n| crafting_special_firework_star| The recipe for crafting firework stars|\n| crafting_special_firework_star_fade | The recipe for adding fade colors to firework stars|\n| crafting_special_mapcloning| The recipe for copying maps|\n| crafting_special_mapextending| The recipe for extending maps|\n| crafting_special_repairitem| The recipe for repairing items with durability|\n| crafting_special_shielddecoration| The recipe for adding banners to shields|\n| crafting_special_tippedarrow| The recipe for adding potion effects to arrows|\n\ncrafting_transmute fields\n\nThese fields are present in crafting transmute recipes.\n\n| Field| Format| Description|\n| ---------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------ |\n| input| An ingredient | The item to be transmuted. This item's components will be preserved|\n| material | An ingredient | The item used to transmute the input|\n| result| A counted result| The id of the resulting item. This will copy the components of the input item if they weren't overwritten. |\n\n\nIf the rows are less than three characters long, or there are fewer than three rows, the recipe can be moved\naround the crafting grid. Recipes with two or fewer rows and columns can be crafting in the 2x2 crafting grid in the\ninventory.\n\n\n\nThis can be a bit hard to understand from the description; it may be helpful to read the\nexample to understand it better.\n\n\nSmithing fields\n\nThese fields are present in smithing_transform and smithing_trim recipes.\n\n| Field| Format| Description|\n| ---------- | ----------------------------------- | ---------------------------------------------------------------------------------------- |\n| template | An ingredient| The item to be used as the template in the recipe|\n| base| An ingredient| The base item to be upgraded or trimmed|\n| addition | An ingredient| The item used to upgrade or trim the base|\n| pattern| A smithing trim pattern ID| The smithing trim pattern applied in the recipe, only present in smithing_trim recipes |\n| result| A counted result | The result of the recipe, only present in smithing_transform recipes|\n\nstonecutting\n\nThese fields are present in stonecutting recipes.\n\n| Field| Format| Description|\n| ------------ | ----------------------------------------- | ----------------------------- |\n| ingredient | An ingredient| The ingredient for the recipe |\n| result| A counted result| The result of the recipe|\n\nCommon data structures\n\nThis is a list of common data structures used in different recipe formats.\n\nIngredient\n\nRepresents possible ingredients for a recipe. Can be an item's resource location, the hash-prefixed resource location of an item tag (e.g. #minecraft:logs), or an array of valid item resource locations.\n\n\nUnfortunately, components cannot be detected for recipe ingredients \n\n\nSingle result\n\nRepresents a single item, the result of a recipe. An object containing:\n\n| Field| Format| Description|\n| ----------------------- | --------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| id| A string| The id of the resulting item|\n| components (optional) | An object | A map of component names to values, which add to or replace the components of the resulting item |\n\nCounted result\n\nRepresents the result of a recipe. A single result, with an optional count field, an integer\nspecifying the count of the resulting item. If not included, the count defaults to 1.\n\nExample\n\nThis file adds a shaped crafting recipe to craft bedrock out of beds and rock (stone).\n\nThis file should be placed in the data/ /recipe folder. \n\n\nminecraft:beds is an\nitem tag provided by Minecraft containing all colors of beds.\n\n\n{\n\"type\": \"minecraft:crafting_shaped\",\n\"pattern\": [\n\"_\",\n\" X \",\n\"_\"\n],\n\"key\": {\n\"_\": \"#minecraft:beds\",\n\"X\": \"minecraft:stone\"\n},\n\"result\": {\n\"id\": \"minecraft:bedrock\"\n}\n}","description":"Recipes are files which define crafting recipes in-game.","url":"/wiki/files/recipes/","tags":[]},{"title":"Dialogs","content":"Dialogs\nA dialog is a \"pop-up\" menu/form which we can send to the user by using the /dialog command. They can show text to the user, and can also have text inputs, check boxes, select menus, number inputs, and action buttons. \n\nFor example, you could create a settings menu for your datapack with a dialog. They can open the dialog with a function (which runs the /dialog show command), and when they are done, their inputs in the form will be converted into a command which will change the settings of the datapack.\n\nDialogs are stored as JSON files in the /data/ /dialog/ folder.\n\nTypes of dialog\nThere are many different types of dialog that we can create. \n\nAll dialogs can have a title (displayed at the top of the screen), a body (which can contain text), and any number of inputs (e.g text, number, multiselect, checkbox). The exact format of the dialog (including whether there are buttons in the footer) depends on the type:\n\nConfirmation (minecraft:confirmation): This type of dialog has two buttons in the footer (e.g \"Yes\" and \"No\", or \"Submit\" and \"Cancel\"). \nNotice (minecraft:notice): This type of dialog has one button in the footer - it is the simplest type of dialog.\nMulti Action (minecraft:multi_action): This type of dialog has a list of buttons (arranged in columns), and optionally a \"close\" button at the bottom.\nDialog List (minecraft:dialog_list): This type of dialog consists of any number of buttons that open another dialog when clicked (arranged in columns)\nServer Links (minecraft:server_links): This type of dialog will display the server's preset custom links.\n\n\nThe body can contain items as well as text. If an item is used, then it will display graphically, and will look as if it is in the inventory when it is hovered over by the cursor.\n\n\nInputs\nThere are different types of input we can use on form dialogs (simple input form and multi action input form):\nText (minecraft:text): Allows the user to enter text.\nNumber range (minecraft:number_range): Allows the user to select a number with a slider (like in the settings menu)\nBoolean (minecraft:boolean): This is a checkbox. When the checkbox is ticked, then the value is true, and vice versa.\nSingle Option (minecraft:single_option): Allows the user to select one from a list of options. It looks like a button, but you click on it to cycle through the values.\n\nEach input also has a key. This is the name of the macro value that is used when a dynamic/run_command button is clicked. For instance, if one input has the key message, and a button runs the command /tellraw @a \"$(message), then the value from that input is used in the command.\n\nThese inputs are pretty customisable. For instance, Text, Number range, and Single Option types can have a custom width, text inputs can be made multiline, etc.\n\nActions\nActions are basically buttons (e.g the submit button) which will do something when clicked. On forms, actions will run a command which uses the inputs from the form, like a submit button. On other dialog types, they can do things such as running a set command, opening a URL, opening another dialog, etc.\n\nThe action button has a click event when the player is clicked (which is essentially the same as text components). This click event can be: Open URL, Run Command, Suggest Command, Copy Text to Clipboard, or Show Dialog.\n\nIf the dialog has inputs, you can also use dynamic actions such as dynamic/run_command. This works similar to the run command action, except the arguments of the commmand can change based on the values of the inputs.\n\nFor example, if a simple input form has one text input with the ID name and the user has entered the value Silabear, and the action is a dynamic/run_action action which runs the command kill @aname=$(name)], then when the action is clicked, the player will run the command kill @a[name=Silabear].\n\n\nNote that the player needs permission to run the command. This means that, if the player does not have operator status, then most useful commands cannot be run.\n\n\nJSON Format\nThe [Minecraft Wiki goes into detail on the JSON format of a dialog file. However, we recommend that you use Misode's Dialog Editor to create dialog files, which also allows you to preview the dialog in the browser.\n\nUsing dialogs\nDialogs can be shown to a player in three different ways:\n/dialog command: The /dialog command can be used to show a dialog to a player at any time. For example, /dialog show @a namespace:my_dialog will show the dialog in /data/namespace/dialog/my_dialog.json to all players.\nPause Screen: Any dialogs listed in the dialog tag minecraft:pause_screen_additions (/data/minecraft/tags/dialog/pause_screen_additions.json) will be available from the pause screen. If this tag only has one dialog, then there will be a button on the pause screen which opens that dialog. If there are more dialogs in the tag, then the button on the pause screen will open a menu which lets you open any of the dialogs in the tag. Note that this replaces the \"Send Feedback\"/\"Report Bugs\" button on the home screen if used.\nQuick Actions: Any dialogs listed in the dialog tag minecraft:quick_actions (/data/minecraft/tags/dialog/quick_actions.json) will be available when a player clicks the Quick Actions keybind (which is G by default). If the tag only has one dialog, then clicking G will open that dialog, otherwise it will open a menu where you can select any of the dialogs, like the pause screen additions\nClick Events: In text components and actions in other dialogs, one click event type is Open Dialog. This lets the player open a dialog when they click on text (in chat, in a book, on a sign, etc) or a button (in a dialog).","description":"Dialogs are pop-up menus that you can send to the user","url":"/wiki/files/dialogs/","tags":[]},{"title":"Advancements","content":"Advancements\nAdvancement files are used to create in-game advancements. These can have display properties to make them visible to the player, like how vanilla advancements work. In many function datapacks, we can use hidden custom advancements to detect events (e.g player attacks entity) and then run a function.\n\nAdvancements can be stored in trees. This means that an advancement can have parent and children advancements. This tree format is good for showing progression in different areas of the game, as well as allowing you to have custom advancment tabs.\n\nAdvancement files are JSON files stored in the /data/ /advancement folder.\n\nJSON Format\nFor information about the JSON format in general, see the JSON page.\n\nEach advancement is represented by a JSON object stored in the advancement JSON file. The advancment JSON object can have the following fields:\ncriteria: An object containing the criteria/criterion that can trigger this advancement. (See the Criteria section below)\nrequirements: This can optionally be used to specify more advanced rules as to which criteria trigger the advancement (for example, this can be used to specfiy \"Advancement is given if (Criteria A OR Criteria B) AND (Criteria C OR Criteria D) is true\"). This should be a list of lists of criteria keys - the advancement is given when at least one criteria from each list has been achieved.\ndisplay: If left out, this advancement is completely hidden from the player. Otherwise, this will control the style of the advancement, and where it is displayed to the player. It has the following keys:\nicon: An object defining the item used as the icon as the advancement. This has a id field (the item ID) and components (an object with the item components)\ntitle: A text component representing the title or name of the advancement that is shown to the player\ndescription: A text component representing the description of the advancement\nbackground: (Root advancement only) The path to the background texture of the advancement tab\nframe: Used to specify the frame (or type) of advancement. This should be either \"task\" (default), \"challenge\", or \"goal\".\nshow_toast: If true, a pop-up will be shown when a player completes the advancement. Defaults to true (if display exists).\nannounce_to_chat: If true, the advancement will be announced to chat when it is completed by a player. Defaults to true (if display exists)\nhidden: If true, the advancement will not show up in the advancements menu until it has been achieved by the player. Defaults to false.\nparent: The ID of this advancement's parent advancement. This should be set if your advancement is not just for internal event purposes. If this is left blank, it is considered to be a root advancement.\nrewards: An object which stores data about what should happen to the player when the advancement has been achieved. This can contain the following fields:\nfunction: The ID of the function to run as the player when they achieve the advancement.\nloot: A list of loot table IDs to be given to the player when they achieve the advancement.\nrecipes: A list of the recipe IDs to be unlocked by the player when they achieve the advancement\nexperience: The XP points to give to the player when they achieve the advancement. This should be an integer\nsends_telemetry_event: (minecraft namespace only) Whether to send telemetry info about this advancement to Mojang. Defaults to false.\n\ncriteria\nThe criteria object is an object containing the criteria needed to unlock this advancement. This object should contain other objects - the key of which can be anything, as it serves as the criteria ID. If the requirements field is not used, the advancement will be achieved when all of the criteria have been achieved.\n\nEach criteria object contains a trigger and conditions fields. There are many different triggers that can be used, the contents of conditions depends on which trigger is used. \n\n\nThe player condition can exist with any advancement trigger (except minecraft:impossible). This condition can either be an object (an entity_properties predicate) or a list of other predicates (any predicate type) to further match the player.\n\n\nYou can see all the advancement criteria using a generator such as misode.github.io.\n\nUsing advancements to detect events\nBy specifying a function in the rewards section, and not including any display information, you can make an advancement essentially just become an event listener (something that will run a function when the player does something). In order for this to work multiple times, the function must revoke the advancement from the player (using advancement revoke @s only ...), so that it can be regained later.\n\nNote that the advanement will run the function as the player, but not at the player.","description":"In a datapack, we can create advancements, which can additionally be used to detect events.","url":"/wiki/files/advancements/","tags":[]},{"title":"Predicates","content":"Predicates\nPredicates are a type of file which can be called to check if a certain condition is true. For instance, you can create a predicate to check if a player is walking, if an entity is above a specific Y level, or if a player is holding an item. They are extremely versatile and, in many cases, more optimised than execute if commands.\n\n\nAlthough this page covers predicate files, predicates are also used within in advancements and loot table files. The structure of these predicates is the same as described here, although some fields may not be used in certain contexts.\n\n\nExamples\nThis predicate will use the entity_properties condition check if the player is holding a beef item while being inside a desert village:\n{\n\"condition\": \"minecraft:entity_properties\",\n\"entity\": \"this\",\n\"predicate\": {\n\"location\": {\n\"structures\": \"minecraft:village_desert\"\n},\n\"equipment\": {\n\"mainhand\": {\n\"items\": \"minecraft:beef\"\n}\n}\n}\n}\n\nWe can use @apredicate=namespace:my_predicate] to select all players who match the predicate. For example:\nexecute as @a[predicate=namespace:my_predicate] run say I am holding beef in a desert village :D\n\nJSON Format\nEach predicate is represented as a JSON object. Predicate files can either contain one predicate object, or a list of predicate objects. Each predicate object needs a condition field, which specifies the type of condition to check. The rest of the fields depend on the condition type.\n\nFor more information about the JSON format in general, see the [JSON page.\n\nCertain objects are commonly reused within different predicate (and advancement) conditions. Below are some of them, along with their JSON structure:\n\nNumber providers\nA number provider is used in a predicate to provide a number. This could be a constant, score value, random value, etc. \n\nThis can simply be a number (e.g 4 or 5.87). This can also be an object with a min and max field to represent a random number (e.g {\"min\":1, \"max\":10}). For more advanced providers, they are represented as objects - the contents of the object will vary based on which type field you use. The available type fields, along with the fields required for them, are as follows:\n\n\"binomial\": Provides a random number based on binomial distribution. Requires the following fields:\nn: The number of trials used for the binomial distribution. This should be an int or number provider\np: The chance of success for each trial. This should be an int or number provider\n\n\"constant\": Provides the specified number. Requires the following field:\nvalue: The value to provide. This should be an int or a float\n\n\"score\": Provides the score of the entity as a number. Requires the following fields:\ntarget: An object to specify the score holder. Contains a type field - if set to fixed, then a name field should be used to specify which player's (by username) or entity's (by UUID) score to use. If set to context, then a target field should be used with one of the following: this, killer, direct_killer, killer_player\nscore: The objective name to get the entity's score from.\nscale: If present, then the score is multiplied by scale.\n\n\"storage\": Provides the value from a specific path in an NBT storage. Requires the following fields:\nstorage: The storage ID to get the score from.\npath: The NBT path to the specified field in the storage.\n\n\"uniform\": Provides a random number between two values. Requires the following fields:\nmin: The minimum number to return. This should be a number or number provider.\nmax: The maximum number to return. This should be a number or number provider.\n\nItem matcher\nAn item matcher is used to match an item with advanced filters for components and count. \n\nAn item matcher is an object which can consist of the following fields:\nitems: The item type(s) to match. This can either be string (with an item ID or item tag ID), or an array of item IDs.\ncount: The count of the item stack. This can either be an integer or an object with a min and max key to match a range of counts.\ncomponents: An object containing the item components to match. The key is the component name, and the value is the expected value in the component. This will only match if the component is exactly the same as the value - if any other data is in the component, it will be false.\npredicate: Like components, but will match if the component at least contains the specified data, rather than only matching if it is exactly the same.\n\nConditions\nThese are all the possible conditions that can be used in a predicate.\n\nblock_state_property\nblock_state_property checks if the block state(s) of the block is/are equal to a specified value(s). This predicate type is not usable with execute if predicate, instead, this predicate is used in a loot table to check a block.\n\nFields:\nblock: The block ID to match (e.g minecraft:andesite_wall)\nproperties: A map of block state properties to match. The key is the property name, and the value is the property value. For instance, {\"waterlogged\":\"true\", \"south\":\"tall\"}.\n\ndamage_source_properties\ndamage_source_properties checks the source of damage. This is often used in advancements and loot tables.\n\nFields: \npredicate: An object containing the following keys:\ntags: A list of damage_type tags to match. Checks if the type of damage is inflicted in any of these tags (can be toggled with the expected field). For instance, {\"id\":\"minecraft:bypasses_shield\",\"expected\":true}].\nsource_entity: An entity_properties predicate to match the source entity (inflicter, e.g skeleton) of the damage.\ndirect_entity: An entity_properties predicate to match the direct entity (entity responsible, e.g arrow entity) for the damage.\n\nenchantment_active_check\nenchantment_active_check checks if the enchantment is active. This can only be used in enchantments.\n\nFields:\nactive: If set to true, will check that the enchantment is active. If false, will check that the enchantment is inactive.\n\nentity_properties\nentity_properties checks if the entity matches the specified properties. This is very often used in datapacks - it can be used to check players and entities with the predicate= selector argument, and execute if predicate.\n\nFields:\nentity: Who to check. Can be this (equivalent of @s), attacker (the entity that attacked), direct_entity (the entity that caused the damage), or attacking_player.\npredicate: An object containing all the entity properties to check. There are lots of these, and going into full detail would take a lot of space (use a generator like [misode.github.io to create these more efficiently):\ntype: The entity type to match. For instance, minecraft:player.\ntype_specific: An object that contains properties which may only be specific to one type of entity.\nteam: The team that the entity is on.\nnbt: An NBT object to match. This should be in a string. For instance, \"{Health:20}\".\nlocation: A location_check predicate to match the entity's location.\ndistance: An object which is used to match the distance between the entity and wherever the predicate is being checked.\nflags: An object which is used to match certain true/false flags of the entity, such as if they are on fire, or if they are sneaking.\nequipment: An object which is used to match the equipment (head, chest, mainhand, etc.) of the entity. The key is the slot (e.g head), and the value is an item matcher.\nvehicle: Another entity_properties predicate to match the entity which this entity is riding.\npassenger: Another entity_properties predicate to match the entity which is riding this entity.\nstepping_on: Following the same structure as location, this matches the block the entity is standing on.\ntargeted_entity: Another entity_properties predicate to match the entity which this entity (non-player) is targeting.\neffects: An object which matches the current status effects of this entity\nslots: An object which matches the contents of the entity's inventory slots.\nmovement: An object which matches the movement of the entity.\nperiodic_tick: Returns true once every x ticks of the entity's lifetime.\nmovement_affected_by: Following the same structure as location, this matches what affects the movement of the entity.\ncomponents - Matches entity components exactly (the component must be exactly equal to what is being checked).\npredicates - Matches entity components ignoring any other data in the component (the component must contain what is being checked).\n\nentity_scores\nentity_scores checks if the entity's score on an object matches a specified value or range. \n\nFields:\nentity: Who to check. Can be this (equivalent of @s), attacker (the entity that attacked), direct_entity (the entity that caused the damage), or attacking_player.\nscores: An object containing the scores to check. The key is the objective name, and the value is either an int (e.g 33) or an object containing a min and max number provider to match a range. For instance, {\"scoreboard1\":5, \"scoreboard2\":{\"min\":1, \"max\": 10}}.\n\nkilled_by_player\nkilled_by_player checks if the entity was killed by a player. This is used in loot tables.\n\nFields:\ninverse: If true, checks if the entity was not killed by a player. (optional)\n\nlocation_check\nlocation_check checks if the current location matches the specified properties. When used in an entity_properties -> location field, it checks the entity's location, but if used in a loot table, it checks the location of the loot source (block or entity).\n\nFields:\nposition: The coordinates in the world to check. This is an object containing the following keys:\nx: The x coordinate to match. This should be a number or a number provider.\ny: The y coordinate to match. This should be a number or a number provider.\nz: The z coordinate to match. This should be a number or a number provider.\nbiomes: A biome or list of biomes to match. Will be true if the location is within a biome. For instance, [\"minecraft:plains\", \"minecraft:forest\"].\nstructures: A structure or list of structures to match. Will be true if the location is within a structure. For instance, [\"minecraft:village\", \"minecraft:woodland_mansion\"].\ndimension: The dimension to match. Will be true if the location is in a predicate For instance, minecraft:overworld.\nlight: The light level to match. This should be a single int, or an object containing a min and max number provider to match a range.\nblock: The block to match. This should be an object containing the following:\nblocks: A block ID or list of block IDs to match. For instance, [\"minecraft:mycelium\", \"minecraft:grass_block\"].\nstate: An object containing the block state properties to match. For instance, {\"waterlogged\":\"true\", \"south\":\"tall\"}.\nnbt: An NBT string to match. Will be true if the block at the location contains all of the specified NBT (ignoring other tags). For instance, \"{Items:[{id:\\\"minecraft:stick\\\",Count:1b}]}\".\nfluid: The fluid to match. This should be an object containing the following:\nfluids: A fluid ID or list of fluid IDs to match. For instance, [\"minecraft:water\", \"minecraft:flowing_water\"].\nstate: An object containing the fluid state properties to match. For instance, {\"level\":\"2\"}.\nsmokey: Checks if the location is within 5 blocks veritically of a campfire. This should be a boolean.\ncan_see_sky: Checks if the the sky light level is the highest it could be. This should be a boolean.\n\nmatch_tool\nmatch_tool matches the item used to perform an action. Contrary to what may seem intuitive, this can not be used to check the player's mainhand item in a predicate referenced in predicate= or execute if predicate - this is only for loot tables and advancements.\n\nFields:\npredicate: An item matcher.\n\nrandom_chance\nrandom_chance will be true if a random decimal is less than the value in chance. For instance, 0.5 would be true 50% of the time, 0.25 would be true 25% of the time, etc.\n\nFields:\nchance: The chance of the predicate being true. This should be a float between 0 and 1.\n\nrandom_chance_with_enchanted_bonus\nrandom_chance_with_enchanted_bonus is similar to random_chance, but you can specify a different random chance if the tool used has a certain enchantment. This is used in loot tables and advancements.\n\nFields:\nunenchanted_chance: The chance of the predicate being true if the tool is not enchanted. This should be a float between 0 and 1.\nenchanted_chance: The chance of the predicate being true if the tool is enchanted. This should be a float between 0 and 1.\nenchantment: The enchantment ID to check for. For instance, minecraft:fortune.\n\nsurvives_explosion\nsurvives_explosion will be true if the entity survived an explosion. This is used in loot tables. This predicate type has no other fields.\n\ntable_bonus\nEssentially, table_bonus is a more advanced version of random_chance_with_enchanted_bonus, as you can specify a different chance for each enchantment level\n\nFields: \nenchantment: The enchantment ID to check for. For instance, minecraft:fortune. \nchances: An array of chances for each enchantment level. The first item in the array would be the chance for enchantment level 1, and so on.\n\ntime_check\ntime_check checks the current time.\n\nFields:\nvalue: The time to check, represented in game ticks. This should be a single int, or an object containing a min and max number provider to match a range.\nperiod: If present, value will check for GAMETIME modulo . For instance, setting period to 24000 (the amount of ticks in a day) would check for the current daytime\n\nvalue_check\nvalue_check simply matches a value from a number provider against a range or constant.\n\nFields:\nvalue: A number or a number provider to check against.\nrange: The range used to check value (will return true if value is within this range). This should be a single int, or an object containing a min and max number provider to match a range.\n\nweather_check\nweather_check matches the current weather in the world. To check for sun, you would need to set both fields to false.\n\nFields: \nraining: Checks if it is currently raining. This should be a boolean.\nthundering: Checks if it is currently thundering. This should be a boolean\n\nSpecial Conditions\nThese conditions are special as they are used in conjunction with one or more other conditions to alter the result of the predicate, often acting like logic gates.\n\nall_of or any_of\nall_of and any_of are self explanatory. all_of checks if all specified predicates are true, and any_of checks if any specified predicates are true.\n\nFields:\nterms: A list of predicates to check. This cannot be the ID of the current predicate.\n\ninverted\ninverted will invert the output of the predicate. If the predicate would return true, using this would make it return false, and vice versa.\n\nFields:\nterm: A predicate to check. This cannot be the ID of the current predicate.\n\nreference\nreference simply references another predicate file, as if you included the predicate in the current one. This is useful for reusing predicates across multiple files.\n\nFields:\nname: A predicate ID to check. This cannot be the ID of the current predicate.","description":"Predicates are a type of file which can be called to check if a certain condition is true.","url":"/wiki/files/predicates/","tags":[]},{"title":"Tags","content":"Tags\nRegistry tags, not to be confused with entity tags, are essentially lists of groups such as blocks,\nitems, entity types, etc. They use JSON format and are located in the data/ /tags/folder.\n\nSpecial tags\n\nMinecraft uses some tags internally for certain behaviours. These tags are located in the minecraft namespace. For\nexample:\n\nany functions in the #minecraft:load function tag will be automatically run when a datapack is loaded\nthe #minecraft:minable/pickaxe block tag lists blocks which are mined faster using a pickaxe.\n\nIn many cases, modifying these special tags allows you to configure certain aspects of how Minecraft behaves.\n\nRegistries\nTags group various types in a specific registry (category), such as items, blocks, functions, game events, chat types, etc.\n\nThis list shows some of the possible registry types, as well as the path their tags should be put in.\n\n| Registry Types| Path| Example Value|\n|-------------------|----------------------------------------------------|-------------------------------|\n| Items| /tags/item| \"minecraft:apple\"|\n| Blocks| /tags/block| \"minecraft:grass_block\"|\n| Entity types| /tags/entity_type| \"minecraft:pig\"|\n| Functions| /tags/function| \"namespace:some_function\"|\n| Fluids| /tags/fluid| \"minecraft:water\"|\n| Game Events| /tags/game_event| \"minecraft:container_open\"|\n| Chat Types| /tags/chat_type| \"minecraft:say_command\"|\n| Damage Types| /tags/damage_type| \"minecraft:fly_into_wall\"|\n| Banner patterns| /tags/banner_pattern| \"minecraft:square_top_right\"|\n| Cat variants| /tags/cat_variant| \"minecraft:jellie\"|\n| Enchantments| /tags/enchantment| \"minecraft:sharpness\"|\n| Goat horns| /tags/instrument| \"minecraft:seek_goat_horn\"|\n| Paintings| /tags/painting_variant| \"minecraft:skull_and_roses\" |\n| Entity POI| /tags/point_of_interest_type| \"minecraft:cleric\"|\n| Biome| /tags/worldgen/biome| \"minecraft:plains\"|\n| Flat world preset | /tags/worldgen/flat_level_generator_preset| \"minecraft:classic_flat\"|\n| Structures| /tags/worldgen/structure| \"minecraft:village\"|\n| World preset| /tags/worldgen/world_preset| \"minecraft:large_biomes\"|\n\nJSON format\nFor information about the JSON format in general, see the JSON page.\n\nTag files follow a very simple format, with two fields.\nreplace: Can be true or false (defaults to false). If true, the tag will overwrite other tags with the same path. If false, it will merge with them.\nvalues: An array containing everything to group under this tag. Each element can either be\nan id (e.g. \"minecraft:apple\")\nan object with an id field and a required field (e.g. {\"required\": false, \"id\":\"minecraft:stick\"}). If required is false, the tag will still skip nonexistent ids.\n\n\nTags can also reference other tags. For example, if a tag file contains #minecraft:logs, it will also contain the entire contents of the minecraft:logs tag. A tag is represented by an ID beginning with a #. For more information, refer to the resource locations page.\n\n\nExample\nHere is an example item tag file:\n\n`json\n{\n\"replace\": true,\n\"values\": [\n\"#minecraft:logs\", \n\"#minecraft:planks\", \n\"minecraft:chest\", \n\"minecraft:stick\"\n]\n}","description":"Registry tags, not to be confused with [entity tags](/wiki/command/tag), are essentially lists of groups such as blocks, items, entity types, etc. They use JSON format and are located in the `data/<namespace>/tags/<category>` folder.","url":"/wiki/files/tags/","tags":[]},{"title":"Functions","content":"Functions\n\nFunctions are files essentially containing a list of Minecraft commands. Function files end in .mcfunction, and are\nlocated in the data/ /function folder. Functions can be called (ran) using the function command. (See\n/function for more information)\n\nThe function folder can contain sub-folders for organisation. This changes their reference accordingly - for example,\na function located at data/ /function/sub_folder/my_func.mcfunction would be called using\nfunction :sub_folder/my_func.\n\nWhen a function is run, the commands within it are executed in order. If the return command is run, the function stops\nexecuting immediately and any commands after the return are ignored.\n\nAny line in a function which starts with a # is a comment, and the game ignores it. Any other line is interpreted\nas a command\n\nExample\n\nThis function will give every player an apple, then tell them to enjoy the apple.\n\nGive a player the apple\ngive @a minecraft:apple\n\nTell them to enjoy the apple\nsay Enjoy the apple!\n\nMacro functions\n\nMacros can dynamically change part of a function by inserting NBT into it. Any function can define a macro within it. A\nmacro is a command beginning with $. Macros can use a special syntax: $(). This will substitute for any\nvalue provided aswhen run.\n\nThe /function command can specify a NBT compound to use as the macro values. In traditional programming, this is best\nrepresented as someFunction(foo, bar)\n\nExample\n\nIn this example, we write a function that gives the player a number of diamonds using a macro.\n\nWhen called, $(count) will be replaced with some number, producing a valid command\n$give @s diamond $(count)\n\nfunction example:macro {count: 7}\n\nThis also works\ndata modify storage example:storage count set value 12\nfunction example:macro with storage example:storage","description":"Functions are files essentially containing a list of Minecraft commands. Function files end in `.mcfunction`, and are located in the `data/<namespace>/function` folder. Functions can be called (ran) using the `function` command. (See [`/function`](/wiki/command/function) for more information)","url":"/wiki/files/functions/","tags":[]},{"title":"Coordinates","content":"Coordinates\n\nCoordinates in Minecraft are represented by an x, y, and z value. They are used to represent positions of\nentities, blocks, particles, sounds and more. In commands, they are represented as simply x y z, where x, y, and\nz are decimal numbers representing the coordinates on each axis.\n\nBlock coordinates are locked to the grid and are unique - there can only be one block per set of coordinates. Block\ncoordinates are whole numbers, for example you can have a block at 123 86 94 but not 123.7 86.2 94.6. Entities are\nnot locked to the grid - they can be at decimal positions (and usually are).\n\nx.0 y.0 z.0 represents the bottom left corner of a block, not the centre. The centre of a block would be represented\nby the coordinates x.5 y.5 z.5.\n\n\nEvery command and function in Minecraft is always executed at a position. This is usually the world spawn. You\ncan change this using the commands \"execute at\" or \"execute positioned\".\n\n\nExamples\n\n/setblock 123 86 94 minecraft:pink_concrete: In this setblock command, we tell the game to put a pink concrete\nblock at the coordinates 123 86 94.\n/tp @s 66.2 98 45.7: This command would teleport the current entity to the exact coordinates 66.2 98 45.7\n\nRelative Coordinates\n\nUsing the symbols ~ and ^, we can reference coordinates relative to the current coordinates (for example, you can\nget the position 7 blocks above the current position).\n\n represents the current position on any axis. For example, 1276 would teleport me to x=12 z=76 but keep y\nas the current position. The coordinates~ would represent the position of the command - this is useful to do\nsomething at the current position such as placing a block or summoning an entity.\n\nThesymbol can be followed by a number to include an offset to the current position. For example,12would\nrepresent the current position offset by 10 blocks on the y-axis (or in simpler terms: the position 10 blocks above\nthe current position). This can also be a negative number.\n\nSimilarly ^ represents a relative position, taking into account the current rotation too. The most common use for this\nis to get a position in front of the direction of rotation. For example, you can use ^ ^ ^5 to get the position 5\nblocks in front of the current position in whatever direction the command or entity is rotated.\n\n^3 ^ ^ represents a vector 3 blocks perpendicular of the head (sway)\n^ ^3 ^ represents a vector 3 blocks \"above\" of the head (heave)\n^ ^ ^3 represents a vector 3 blocks in front of the head (surge)","description":"Coordinates in Minecraft are represented by an `x`, `y`, and `z` value. They are used to represent positions of entities, blocks, particles, sounds and more. In commands, they are represented as simply `x y z`, where `x`, `y`, and `z` are decimal numbers representing the coordinates on each axis.","url":"/wiki/concepts/coordinates/","tags":[]},{"title":"Target Selectors","content":"Target Selectors\n\nTarget Selectors are used as an argument in commands to select entities and players in the world. We use target\nselectors to find players or mobs and do things to them. Many commands need to be given a target selector as an\nargument, or otherwise require being executed as an entity.\n\nAll target selectors start with an @ symbol, followed by a base selector (see the table below), and optionally any\nother criteria which will narrow down the selection further.\n\nExample: tellraw @adistance=..10] \"You're within 10 blocks of me\". The target selector is @a[distance=..10],\nand tells the game to only send the message to players within 10 blocks.\n\nBase target selectors\n\nIn Java Edition, there are 6 base target selectors:\n\n| Target Selector | Description|\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| @e| All Entities - By itself, this selector will select every single entity which is currently loaded in the world|\n| @s| This Entity - This selector will select the entity which is currently running the command. For example, if I run a command as @s, then it will run the commands as me. |\n| @a| All Players - This selects all currently online players. (All players are always loaded in the world).|\n| @r| Random Player - This selects one random player.|\n| @p| Nearest Player - This selects the nearest player to the position this command is ran from.|\n| @n| Nearest Entity - This selects the nearest entity (player or non-player) to the position this command is ran from.|\n\n\n@e only selects entities in a loaded chunk. If an entity exists but is not currently being loaded, it will\nnot select that entity.\n\n\nAdditional arguments\n\nTarget selectors can (and usually are) followed by additional arguments to filter the selection even more to only find\nthe entities that you want. Target selector arguments are contained within square brackets after the base selector\n(@e[...]) and are written as [ :, =,...]\n\nExample: In our previous example (@a[distance=..10]), we use the argument distance=..10 to specify that we only\nwant to target entities which are less than 10 blocks away.\n\n\nMost target selectors can be inverted by using =! meaning it will only select entities who do not match the\nargument. (E.g. @e[type=!minecraft:creeper] will select every entity that is NOT a creeper)\n\n\n| Argument| Example| Description|\n| ------------------ | ---------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| type| @e[type=minecraft:pig]| Filters to only include entities of a certain type or entity_type tag. Valid with @e, @s and @n. type can be any entity ID or entity_type tag.|\n| name| @e[name=Aron]| Filters to include entities with a specific name. name is a string - it cannot be JSON text.|\n| distance| @e[distance=6]| Filters to include entities within a certain distance or range. .. is used to represent \"greater/less than\" operations - for example, ..6 means less than 6 and, 8.. means more than 8.|\n| nbt| @a[nbt={SelectedItem:{id:\"minecraft:stone\"}}]| Filters to include entities with specific [NBT data. NBT data will be partially matched - as long as the specified data exists on the entity, it doesn't matter what other data it has.|\n| sort and limit | @elimit=1,sort=nearest]| These two arguments are often used together to find entities based on ordering. For example, limit=5,sort=furthest selects the 5 entities which are furthest away from the current position.|\n| x/y/z| @e[x=10,y=9,z=-5,distance=..5]| Specifies a starting position to work from; affecting distance, dx/dy/dz, and sort/limit. If left blank, it defaults to~.|\n| dx/dy/dz| @e[x=10,y=13,z=87,dx=10,dy=20,dz=5]| Creates a selection area (cuboid) which will only select entities if part of their hit box is within the area. The current position or x/y/z is used as the position of the cuboid's corner, where the coordinates are the smallest. If at least one of the dx/dy/dz values are set, the others default to 0 if not set. The checked area is always 1 block bigger in the positive direction than specified, so the smallest checkable area is a 1x1x1 cube with all values at 0. |\n| tag| @a[tag=CustomTag]| Selects entities with a specified tag added with the /tag command or Tags[] NBT. No entities have tags by default - tags can only be added by the datapack or by commands.|\n| team| @a[team=red]| Selects entities in a specific team.|\n| scores| @e[scores={foo=10}]| Selects entities based on their value on a scoreboard. Like distance, you can use .. to specify ranges.|\n| predicate| @e[predicate=namespace:my_predicate]| Selects entities based on whether they pass a custom predicate check.|\n| gamemode| @a[gamemode=creative]| Selects players in a specific game mode.|\n| advancements| @a[advancements={minecraft:story/follow_ender_eye=true}] | Selects players based on whether they have unlocked a specific advancement.|\n| level| @a[level=10]| Selects players based on their current XP level (not amount of points).|\n\nMore information about the arguments:\n\ntype argument\n\nThe type=argument will filter the selection to only include entities of a certain type, or those in an\nentity_type tag.\n\nmust be a valid entity ID or entity_type tag ID. This argument can only be used with @e, @s or @n.\n\nExamples:\n\n@e[type=minecraft:pig]: Selects all pigs\n@e[type=#minecraft:aquatic]: Selects all aquatic animals\n\nname argument\n\nThe name=argument will filter the selection to only include entities who have a specific name.\n\nis a simple string. This can not be a text component but name=Freddie would still match a styled name like {\"text\":\"Freddie\",\"color\":\"blue\"} or similar.\n\nExamples:\n\n@e[name=Aaron]: Selects all entities named Aaron\n@e[name=\"Aaron Aaronson\"]: Selects entities named Aaron Aaronson\n\n\nNote that names with more than one word need to be surrounded by quotes.\n\n\ndistance argument\n\nThe distance=argument will filter the selection to only include entities who are within a distance\nrange.\n\ncan either be a value (such as 7) or a range (such as ..8 or 21..)\n\nExamples:\n\n@e[distance=6]: Selects all entities which are exactly 6 blocks away from the execution position.\n@e[distance=..20]: Selects all entities within 20 blocks of the execution position.\n@e[distance=3..]: Selects all entities that are more than 3 blocks away from the execution position.\n@e[distance=12..15]: Selects all entities between 12 and 15 (inclusive) blocks from the execution position.\n\nnbt argument\n\nThe nbt= argument will filter the selection to only include entities which have or do not have specific NBT\ndata.\n\n`` is an [NBT compound. The entity must match everything within the compound.\n\nExamples:\n\n@anbt={SelectedItem:{id:\"minecraft:stone\"}}]: Selects all players who are holding stone\n@e[type=minecraft:arrow,nbt={inGround:1b}]: Selects all arrow entities who are in a block.\n\nsort and limit arguments\n\nThe sort=,limit=will limit the amount of possible entities it will select and will select entities\nbased on the priority defined in.\n\ncan be one of the following:\n\narbitrary: sort in entity load order, which is arbitrary\nnearest: sort in increasing order of distance\nfurthest: sort in decreasing order of distance\nrandom: sort randomly (default type for @r)\n\ncan be any integer.\n\nExamples:\n\n@e[limit=1,sort=nearest]: Selects the nearest entity to the position of execution\n@e[limit=5,sort=furthest]: Selects the furthest 5 entities from the position of execution.\n@e[limit=7,sort=random,type=minecraft:cow]: Selects 7 random cows..\n\nx/y/z arguments\n\nThe x/y/z=arguments do not directly change the selection, but are used alongside other arguments to\nspecify a starting position to work from.\n\nThis argument(s) will affect the arguments distance, dx/dy/dz and sort/limit.\n\nExamples:\n\n@e[x=10,y=9,z=-5,distance=..5]: Selects all entities less than 5 blocks away from the position X=10/Y=9/Z=-5\n\ndx/dy/dz arguments\n\nThe dx/dy/dz arguments will create a cuboid that is at least 1x1x1 blocks big and the given value will increase the\nsize of the cuboid in that direction by the given value in blocks.\n\nAny entity fully or partially inside the cuboid will be selected.\n\nYou can mix and match dx, dz, and dz however you want. To create the cuboid at least 1 of the three has to be\nthere.\n\n\nThe generated cuboid does not snap to the block grid \n\n\nThe base cuboid that gets generated with\ndx/dz/dz=0 will always stretch from the command origin to positive x/y/z\n\n\nExamples:\n\n@e[x=10,y=13,z=87,dx=10,dy=20,dz=5]: Selects any entities if any part of their hit box is within the cuboid\nw=11,h=21,l=6 starting from the position x=10,y=13,z=87\n@e[x=7,y=3,z=9,dx=0,dy=0,dz=0]: Selects any entities if their hit box overlaps with the block at x=7,y=3,z=9\n\ntag argument\n\nThe tag=argument will select entities which have the specified tag.is any tag string (no spaces).\n\nEntities do not naturally have tags - these are separate from entity_type tags such as that used in the type\nargument. Instead, these select entities based on the [tags added with the /tag command or Tags[] NBT.\n\nExamples:\n\n@a[tag=CustomTag]: Selects all players with the tag CustomTag\n@e[tag=!ignore]: Selects all entities which do not have the ignore tag.\n\nteam argument\n\nThe team=argument will select entities which are in a specific team. Since entities can only be in one\nteam at a time, you cannot use team= more than once, however you can duplicate negated team arguments (team=!).\n\nis any tag string (no spaces).\n\nExamples:\n\n@a[team=red]: Selects all players in the red team\n@e[team=Bears]: Selects all entities in the Bears team\n@e[team=!blue]: Selects all entities which are not in the blue team\n\nscores argument\n\nThe scores={ =,...} argument will select entities based on their value on a scoreboard.\n\nis a scoreboard objective which must exist already.can be either an integer or a range.\n\nExamples:\n\n@e[scores={foo=10}]: Selects all entities with a score of exactly 10 on the foo scoreboard.\n@e[scores={foo=5,bar=7}]: Selects all entities with a score of exactly 5 on the foo scoreboard and exactly 7\non the bar scoreboard.\n@e[scores={foo=8..}]: Selects all entities with a score of 8 or more on the foo scoreboard.\n\npredicate argument\n\nThe predicate=argument will select entities based on whether they pass a predicate check.is\na predicate ID.\n\nExamples:\n\n@e[predicate=namespace:my_predicate]: Selects all entities who pass the predicate in\ndata/namespace/predicates/my_predicate.\n@e[predicate=!namespace:another_predicate]: Selects all entities who fail the predicate in data/namespace/predicates/another_predicate.json\n\ngamemode argument\n\nThe gamemode=(survival|creative|adventure|spectator) argument will select players who are in a specific game mode.\n\nExamples:\n\n@a[gamemode=creative]: Selects all players in creative mode\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an\nadvancement.is an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the\nfollow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the\nfollow_ender_eye advancement.\n\nadvancements argument\n\nThe advancements={ =(true/false)} argument will select players based on whether they've unlocked an\nadvancement.is an advancement ID.\n\nExamples:\n\n@a[advancements={minecraft:story/follow_ender_eye=true}]: Selects all players who have unlocked the\nfollow_ender_eye advancement.\n@a[advancements={minecraft:story/follow_ender_eye=false}]: Selects all players who have not unlocked the\nfollow_ender_eye advancement.\n\nlevel argument\n\nThe level=argument selects players based on their current XP level (not amount of points).\n\ncan be an integer or range.\n\nExamples:\n\n@a[level=10]: Selects all players who have an XP level of exactly 10.\n@a[level=4..]: Selects all players who have an XP level of 4 or more.\n\nx_rotation argument\n\nThe x_rotation=argument selects players based on their vertical rotation (pitch).\n\ncan be a floating point value or float range from -90 to 90\n\nExamples:\n\n@a[x_rotation=0..90]: Selects all players who are looking below the horizon or directly at the horizon.\n@a[x_rotation=90]: Selects all players who are looking straight down.\n\ny_rotation argument\n\nThe y_rotation=argument selects players based on their horizontal rotation (yaw).\n\ncan be a floating point value or float range from -180 to 180\n\nExamples:\n\n@a[y_rotation=-180]: Selects all players who are facing exactly due north.\n@a[y_rotation=-180..-90]: Selects all players who are looking between north and east or exactly north or east.","description":"Target Selectors are used as an argument in commands to select entities and players in the world. We use target selectors to find players or mobs and do things to them.","url":"/wiki/concepts/target-selectors/","tags":[]},{"title":"Ranges","content":"Ranges\nA range specifies a set of values between two numbers. Ranges are used in some commands (such as execute) and selectors to specify a set of values to compare against.\n\nFor example, the distance= selector accepts a range to select entities within a certain distance from the player. The range distance=..10 selects entities within 10 blocks of the player.\n\nGreater than (x >= 10)\nTo specify a range of numbers such as \"x or greater\", we can use the min.. syntax. The following range represents \"10 or greater\". Note that this range includes 10.\n10..\n\nLess than (`x","description":"A range specifies a set of values between two numbers.","url":"/wiki/concepts/ranges/","tags":[]},{"title":"Styled Text","content":"Styled Text\nStyled text (bold, underline, colours, etc) is represented as NBT based structures, called \"text components\". A text component is a way to format styled text in Minecraft commands, and is used in many places such as /tellraw, /title, and more.\n\nInstead of just using standard text (for example \"Hello World\"), we can use text components to format the text in a variety of ways, including colours, text effects, click events, hover events, language-based text, accessing NBT data, and more.\n\nFor more information about the NBT format in general, see the NBT page.\n\nFormat\nA text component is formatted as either an object ({text:\"Hello World\",color:\"red\"}), or an array of objects ({text:\"Hello\"},{text:\"World\"}]). An object could just be a normal string ([\"Hello\", \"World\"] and \"Hello World\" are both valid text components). \n\nIf the text component is an array, then all the objects inherit the style from the first object. For instance, if the first object in an array is styled to be red, then all the other objects in the array will also be red unless specified otherwise. \n\nContent sources\nThe actual text of a text component can be either static text or from a source such as NBT or scoreboard. Every object requires one of the following:\ntext:\"\": A simple string of text.\nscore:{name:\"\",objective:\"\"}: The score of a player in an objective. In some cases, name can be set to \"*\", which will access the score of the player viewing the text.\nNBT: This will display the value of an NBT tag. If nbt is used in a text component, then one of storage, entity, or block is also required. The following properties should be used:\nnbt:\"\": The path to the NBT value. This is required - it should be a string value following the NBT path format.\nstorage:\"\": The storage to get the NBT value from.\nentity:\"\": The entity to get the NBT value from.\nblock:\" \": The block to get the NBT value from.\ninterpret:(true/false): If true, then the NBT value's text will be parsed and interpreted as a text component. Defaults to false.\nselector:\"\": The name of a player or entity. \ntranslate:\"\": A translation key from language files defined in a resource pack. This will display the value of the key in the player's selected language.\nwith: This can also optionally be used to insert arguments into the translation key. This should be an array of text components.\nfallback: This can also optionally be used to specify what to display if the translation is not found. If this is not specified, the key itself will be displayed if the translation is not found. This should be a string value.\nkeybind:\"\": The key which a player has bound to a keybind. (For example, key.jump would show the text Space, assuming the player has not changed the keybind).\n\nExample: This text component will display the value of the path ShopData.Name in the NBT storage minecraft:xyz:\n{nbt:\"ShopData.Name\",storage:\"minecraft:xyz\"}\n\nStyle properties\nThe following properties can be used in a text component to change the style of the text:\ncolor: The colour of the text. This can be one of the 16 standard colours (e.g \"red\", \"light_purple\", etc.), or a hex colour code (e.g \"#ff0000\").\nbold: Whether the text is bold. This can be true or false.\nitalic: Whether the text is italic. This can be true or false.\nunderlined: Whether the text is underlined. This can be true or false.\nstrikethrough: Whether the text is strikethrough. This can be true or false.\nobfuscated: Whether the text is obfuscated. Obfuscated text applies a special glitch effect to the text. This can be true or false.\n\nExample: This text will be \"Hello World\", in red, bold, and strikethrough:\n{text: \"Hello World\", color: \"red\", bold: true, strikethrough: true}\n\nInteractivity properties\nThe following properties can be used in a text component to add interactivity to the text:\ninsertion: Can be used to specify text to be inserted into the chat when the text is shift-clicked. This should be a string value.\nclick_event: Can be used to specify an action to be performed when the text is clicked. This should be an object with the following properties:\naction: The action to be performed. This can be one of the following:\n\"open_url\": Opens the url in the field url in the player's web browser.\n\"run_command\": Runs the command in the field command (the player needs permission to run the commands, and this excludes commands like /say or /tell which make the player send something to chat).\n\"suggest_command\": Opens and inserts the contents of command into the player's chat box.\n\"copy_to_clipboard\": Copies the contents of the field value to the clipboard.\n\"change_page\": (books only) Changes the page of the book to the page specified in the field page.\nurl or command or value or page: These fields should be added to click_event alongside action depending on which action you use.\nhover_event: Can be used to specify what happens when a player hovers over the text. This should be an object with the following properties\naction: The action to be performed. This can be one of the following:\n\"show_text\": Shows the text in the field value in a tooltip by the player's mouse.\n\"show_entity\": Shows the entity based on the fields uuid and id in a tooltip by the player's mouse.\n\"show_item\": Shows the item based on the fields id and components in a tooltip by the player's mouse.\nvalue or uuid + id or id + components: These fields should be added to hover_event alongside action depending on which action you use.\n\nExample: This text will be \"Click me\", in blue, and when clicked, it will run the command /say Hello:\n{text: \"Click me\", click_event: {\"action\": \"run_command\", \"command\": \"/say Hello\"}}\n\nOther\nextra: This property can be used to add another component after, which inherits all the styles and interactivity from the parent object.\nseparator: If the text source returns multiple values (e.g. multiple entities with the selector source, or multiple NBT values with the nbt source), this can be used to specify the separator between the values. This should be a string value.\n\nText component generators\nWriting text components manually is tedious - there are numerous generators which can be used to quickly create text components. We reccomend [our Minecraft Text Generator which has an easy UI, cool features like gradient creators, and is updated for modern versions.\n\nIf you are a more advanced datapacker and want full control over the output, these let you create text components one component at a time, with support for more advanced features\nMisode\nMinecraftJSON.com","description":"Styled text in Minecraft commands is done through an NBT text format.","url":"/wiki/concepts/text/","tags":[]},{"title":"Commands","content":"Commands\nCommands are the basic building blocks of most datapacks. Each command is a simple instruction which can tell the game\nto do something. Most datapacks are made primarily of functions - functions are just lists of\ncommands ran in order.\n\nThere are too many commands for this wiki to go over each one individually. However, important commands can be found in the Command Reference section of the sidebar.\n\nCommand Context\nProgramming Minecraft command is unique. Commands are always run with context - this means commands always have a position (in a dimension), rotation, and executor entity. Functions inherit context from their caller, so if you run a function in chat, all the commands in the function will have the same context as if you ran them in chat.\n\nFunctions ran by the game, for instance tick, load, and scheduled functions, will have the follwing context:\nthe executor is the game server. If you use @s in a command, it will not refer to any entity. \nthe position of the command is the world spawn\nthe rotation of the command is 0, 0\n\nIf you run a command in chat, then:\nyou are the executor entity. If you use @s in a command, it refers to you.\nthe position and rotation of the command are where you are standing and looking. If you use~ in a command, it refers to where your position.\n\nThe /execute command will change the context of a command. For instance, this command would change the executor to the player Silabear, and the position of the command to 123 456 789:\nexecute as Silabear positioned 123 456 789 run say Hello!","description":"Commands tell the game to do things. [Functions](/wiki/files/functions) are files which are made up of many commands. They form the basic building blocks for any function datapack.","url":"/wiki/concepts/commands/","tags":[]},{"title":"Resource Locations","content":"Resource Locations\nA resource location is a way of referencing a resource in a datapack (or resourcepack), such as a function. \n\nExample\nThis is an example of a resource location for a function:\n/function my_namespace:some_folder/my_function\nThis resource location would try and access the function /data/my_namespace/function/some_folder/my_function.mcfunction. Notice how we don't need to specify the function folder in the resource location, as it is implied by the /function command.\n\nResource locations for tags\nTo reference a tag (ie the function tag #minecraft:load), you can use the # symbol before the tag name. For example:\n/function #minecraft:load\nThis resource location would try and access the tag /data/minecraft/tags/function/load.json. In this case, all functions in the tag would be ran.\n\nDefault namespace\nIf the namespace (my_namespace, before the colon) is left out, it will default to the minecraft namespace.\n\n/function some_folder/my_function\nThis resource location would try and access /data/minecraft/function/some_folder/my_function.mcfunction.\n\nAllowed characters\nA file name (and resource location) can only contain lowercase letters (a-z), numbers (0-9), underscores (_), dashes (-) and periods (.). In a resource location, / can be used to separate folders.","description":"A resource location is a kind of identified used in Minecraft to point to a certain piece of data, such as a function, item, or storage.","url":"/wiki/concepts/resource-locations/","tags":[]},{"title":"Item Components","content":"Item Components\n\nItem components are data structures which can be applied to items in Minecraft to give them special attributes, such as\na name, lore, being able to be eaten, etc. Each item has specific item components by default - for example, all food\nitems will have the minecraft:consumable` component, which makes the item edible.\n\nA command such as /give or /item can be used to create an item which has additional item components, or remove item\ncomponents from any item.\n\nYou can check out all the components and their data structure on the Minecraft Wiki: https://minecraft.wiki/w/Data_component_format#List_of_components","description":"Item components are data structures which can be applied to items in Minecraft to give them special attributes, such as a name, lore, being able to be eaten, etc.","url":"/wiki/concepts/item-components/","tags":[]},{"title":"/execute","content":"/execute command\n\nThe execute command is used to execute other commands conditionally, or in a different context. The execute command is\nmade up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.\n\nEach subcommand has its own syntax, and most allow/require another subcommand to follow.\n\nContext\n\nEvery command is executed in a context. Various execute subcommands can modify the context in which other commands are\nrun. The context includes:\n\nPosition: The position at which the command is executed (the origin of relative coordinates)\nAnchor: Either eyes or feet. Specifies the origin of local coordinates to either the eyes or feet of an entity.\nExecutor: The entity executing the command (which entity the @s selector refers to)\nRotation: The rotation of the command\nDimension: The dimension in which the command is executed\n\nForking\n\nSome commands cause a fork. That is, the following chain of subcommands get executed more than once. When a command is\nforked, it executes the fork as a whole, then proceeds to the next fork.\n\nFor example, if there are two markers A and B, and the following command is run:\nexecute as @e[type=marker] run function example\nAnd the example function contained the following commands:\n\nsay first command\nsay second command\n\nThe chat output would look like this:\n\n[A] first command\n[A] second command\n[B] first command\n[B] second command\n\nSubcommands\n\n\nIn this documentation, ... represents another required subcommand, and [...] denotes that another subcommand\nis optional.\n\n\nexecute align...\n\nThe align subcommand aligns the executing position to the specified axes (rounding down coordinates to integers).\ncan be any subset of xyz, in any order.\n\nExamples:\n\nexecute align xz ...\nexecute align yxz ...\n\nexecute anchored (eyes|feet) ...\n\nChanges the execution anchor to the eyes or feet of the entity.\n\nExamples:\n\nexecute anchored eyes ...\n\n\nWhen the position is changed not relative to the player, it resets back to feet. You can lock this though by\nusing positioned ^ ^ ^ after it.\n\n\nexecute as...\n\nChanges the executor of the following subcommand to(Does not modify any other context such as location).\nIfrefers to multiple entities, the following subcommand gets executed once for each referenced entity, with\nthat entity as the executor.\nIfrefers to no entities, the execute chain terminates and no further subcommands are run.\n\nExamples:\n\nexecute as @a[distance=10..] ...\nexecute as @e[type=pig] ...\n\nexecute at...\n\nChanges the position and rotation of the following subcommand to that of(Executor remains the same).\nForking rules apply the same as execute as.\n\nExamples:\n\nexecute at @s ...\nexecute at @p ...\n\nexecute facing...\n\nChanges the rotation of the following subcommand to face.\ncan either be a set of coordinates, or entity (eyes|feet), which targets the eyes or feet of the\ngiven entity.\n\nExamples:\n\nexecute facing 0 0 0 ...\nexecute facing entity @e[type=marker,limit=1] feet\n\nexecute in...\n\nChanges the dimension of the following subcommand to.\nApplies dimension scaling, meaning coordinates are divided by 8 when transferring from the overworld to the nether.\n\nExamples\n\nexecute in minecraft:nether ...\n\nexecute on...\n\nChanges executor to other entities based on their relation with the current executor. Same forking rules apply as\nexecute as.\nPossible values forare:\n\nattacker - The most recent entity to damage the current entity in the last 5 seconds.\ncontroller - The entity which is riding and in control of the current entity.\nleasher - The entity holding the the current entity on a lead.\norigin - The entity the current entity originated from, such as the player that shot an arrow.\npassengers - All entities riding the current entity (not including entities riding the passengers).\ntarget - The entity the current entity is trying to attack (angry at).\nvehicle - The entity that the current entity is riding.\n\nExamples\n\nexecute on passengers ...\nexecute on target ...\n\nexecute positioned...\n\nChanges the position (but not rotation) of the following subcommand to. Also resets anchor.\ncan be a set of coordinates, as , or over .\npositioned as... is equivalent to at..., except that it doesn't change rotation or dimension.\npositioned oversets the y coordinate of the position to be one above the specified heightmap.\n\nExamples:\n\nexecute position0 -10 ...\nexecute positioned as @s ...\nexecute over world_surface ...\n\nexecute rotated...\n\nChanges the rotation of the following subcommand to.\ncan either be rotation coordinates, or as , which changes the rotation to that of the specified\nentity. For rotated as , forking rules apply the same as as entity.\n\nExamples:\n\nexecute rotated ~10 0 ...\nexecute rotated as @e[tag=rotate] ...\n\nexecute summon...\n\nSummons the specified entity at the current position, and executes the following subcommand as that entity.\nNote: You cannot specify NBT data for the summoned entity.\n\nExamples:\n\nexecute summon iron_golem ...\nexecute summon marker ...\n\nexecute run \n\nRuns the specified command with the current context. Takes no further subcommands.\n\nThis is useless by itself, and should always be preceded by other subcommands.\n\n\nExamples:\n\nexecute run say hi\nexecute at @e[type=sheep] run setblock~ stone\n\nexecute store (result|success)...\n\nStores an integer value somewhere. If storing result, this numeric value is taken from the output of the final\nsubcommand (Either a run subcommand or a condition). If storing success, the value is either 1 if the final\nsubcommand succeeds (condition passes or command successfully performs its function), or 0 otherwise.\n\ntarget can be one of the following:\n\nblock : Stores the value in the specified path of the given block in the format\nspecified by type (Any numeric NBT type), and multiplied by scale. Note: Even if type is a decimal type\n(float or double), the value is still rounded down.\nentity : Stores the value in the specified path of the target entity, the same way\nas block. entity must only refer to a single entity.\nstorage : Stores the value in the given path of the target storage in the same\nway as block and entity.\nscore : Stores the value for the target entity in the provided scoreboard. target can\nrefer to more than one entity.\nbossbar (value|max): Stores the value in a bossbar, changing either the current value or the maximum value.\n\nExamples:\n\nexecute store result entity @s Pos[1] double 1.5 ...\nexecute store success score $foo my_objective ...\nexecute store result bossbar foo_bar value ...\n\nexecute (if|unless) [...]\n\nExecutes the following subcommand under a given condition. unless inverts the condition, meaning the chain only\ncontinues if the condition not met.\n\nPossible values for condition:\n\nbiome : Checks whether a specific biome is at the given position.\nblock : Checks whether the given position is a certain block.\nblocks (all|masked): Compares two volumes of blocks: from start to end, and from\ndestination such that the second volume is the same dimensions as the first. If all is specified, it checks all\nblocks. If mask is specified, air blocks are ignored.\ndata (block|entity|storage) : Checks if the specified path matches the NBT data of target.\ndimension : Checks if the execution is in the specified dimension.\nentity : Checks whether target resolves to one or more entities.\nfunction : Runs the specified function and tests the return value. If the function did not run the\nreturn command, or if it returns zero, the condition is not met. Must be followed by another subcommand.\nitems (block|entity) : Checks if the given item matches the specified slot of the target\nblock or entity. item is in the format[ ].\nloaded : Checks if the specified position is loaded.\npredicate : Checks whether a predicate succeeds.\nscore (matches | ): Checks whether a score is\nwithin a range (matches), or has a specified comparison to another score. operator can be on of:=, >.\n\nExamples:\n\nexecute if biome~ minecraft:snowy_taiga ...\nexecute if block 16 -42 83 #minecraft:logs ...\nexecute if blocks10 10 10 0 64 0 all ...\nexecute if data storage example:store path{thing:1} ...\nexecute if dimension minecraft:the_end ...\nexecute if entity @e[tag=existent] ...\nexecute if function example:my_fn ...\nexecute if items entity @s weapon.mainhand #minecraft:swords[minecraft:custom_data={foo:\"bar\"}] ...\nexecute if loaded 0 0 0 ...\nexecute if predicate example:check ...\nexecute if score @s score = @r score ...","description":"The execute command is used to execute other commands conditionally, or in a different context. The execute command is made up of multiple subcommands, which can be chained repeatedly and in any order to modify context in various ways.","url":"/wiki/command/execute/","tags":[]},{"title":"All Commands List","content":"List of all commands\nThis is a list of all commands along with what they do basically, organised by permission level.\n\nSyntax\nWe use the following syntax to make it easier to understand which arguments are needed.\n\n| Variable| Meaning|\n| ------------------------ | ---------------------------------------------------------------------------------- |\n|| An argument.|\n|]| An optional entry.|\n|| Pick one of these. This is required.|\n| [entryA│entryB│entryC] | Pick one of these. This is optional.|\n| ...| Some syntax is left out, you can find more about the command on its dedicated page |\n\nCommon Parameters\n\nParameters that show up commonly\n\n| Variable| Meaning|\n| ------------------------ | ---------------------------------------------------------------------------------- |\n| target(s)| A [Target Selector.|\n| range| A Range.|\n| time| Indicates time (1s = 1 second, 1t = 1 game tick)|\n\nList of commands by Permission Level\n\nPermission level 0\n\nThese commands can be run by any player, no matter their permission level.\n\n/help command] - Shows the help menu for commands\n/list [uuids] - Lists players on the server\n/random- Creates a random value (requires Permission Level 2+)\n/seed - Displays the world's seed, permission level 0 only in singleplayer\n/teammsg- Sends a message to all players in the same team of the command runner. (Alias /tm)\n/me- Displays: *in chat\n/msg- Sends a private message to a player. (Alias /tell and /w)\n/trigger [add|set - Triggers a scoreboard objective (see Scoreboards)\n\nPermission level 1\n\nThere are currently no commands with the permission level 1 in Java Edition.\n\nPermission level 2\n\nThese commands require a permission level same or bigger than 2 to run them.\n\n/advancement- Gives, removes or checks players advancements\n/attribute get|base|modifier|reset ... - Can change or read attributes. See more on the Minecraft Wiki\n/bossbar list|add|remove|set|get] ... - Changes or creates bossbars\n/clear [] - Clears items from the players inventory\n/clone ... | from ...> - Copies blocks in an area from one place to another, or from one dimension to another\n/damage [ |by- Damages selected entities/players.\n/data... - Changes block entity or entity NBT data. See more on its dedicated page.\n/datapack disable |enable |list available|enabled]|create- Enables, disables or creates a datapack\n/defaultgamemode- Sets the default gamemode of a world\n/dialog |clear- Shows and hides [dialog screens from players\n/difficulty peaceful|easy|normal|hard] - Sets or gets the difficulty of a world\n/effect |give|infinite]> - Changes the entity's active effects\n/enchant [ ] - Adds enchantments onto held item. (Note that you can't enchant items with a level higher than what is possible in survival)\n/execute ... - Executes a different command (See more here: [/execute)\n/experience ... - Adds, removes or gets the players experience points. (ALIAS: /xp)\n/fill destroy|hollow|keep|outline|replace [filter]] - Fills the defined region with selected blocks\n/fillbiome [replace [filter]] - Fills the defined region with a specific biome\n/forceload add [ ]- Forces chunks to be loaded constantly\n/function |with |entity |storage [ ] - Triggers a [function\n/gamemode] - Changes or checks the player's gamemode\n/gamerule [ ] - Changes or checks a gamerule\n/give [ ] - Gives an item to the player\n/item |entity ... - Modifies or copies items from inventories of entities/blocks\n/kill [ ] - Kills selected entities\n/locate- Displays the coordinates or returns the distance of the nearest biome, structure or point of interest.\n/loot |insert |spawn |replace |kill |mine ...> ... - Spawns or inserts the selected loot table into an inventory or the world\n/particle [] - Spawns a selected particle with specified parameters\n/place... - Places a structure, a feature, a structure template or a template pool on a selected location\n/playsound [- Plays a specified sound to a player\n/random... - Rolls a random number\n/recipe- Gives or takes recipes from a player\n/reload - Reloads all datapacks in a world. (If there is an error in any of the files, it won't reload it)\n/return |fail|run- Returns a number from a function, while also stopping it\n/ride |dismount> - Make an entity ride or dismount a different entity\n/rotate]>> - Used to rotate an entity, works similarly to /teleport but doesn't dismount the entity it's riding.\n/say- Sends a message into chat to all players\n/schedule [append|replace]|clear- Schedules a function or clears it. Note that this will not transfer over selectors\n/scoreboard... - Manages [scoreboard objectives and players\n/seed - Displays the world's seed, permission level 2 only in multiplayer.\n/setblock destroy|keep|replace] - Changes or replaces a specified block with a different one\n/setworldspawn [- Sets the world's spawn\n/spawnpoint] - Changes the spawn point for a player\n/spectate [ ] - Makes a player spectate an entity, note that the spectator has to be in spectator mode\n/spreadplayers [under ]- Teleport entities randomly across a specified area\n/stopsound [- Stops any playing sound\n/summon- Summons an entity\n/tag add |remove | list - Adds, removes or lists entities tags\n/team... - Modifies and creates teams\n/teleport] |facing [ ]>]> ... - Teleport entities to a specified location. (ALIAS: /tp)\n/tellraw- Sends a JSON message to players\n/time |query |set- Controls or checks the time\n/title (times clear|reset|title |subtitle |actionbar ) -\nDisplays text on the player's screen\n/weather weather [ ] - Changes the weather\n/worldborder add|center|damage|get|set|warning ... - Controls the worldborder\n\nPermission level 3\n\nThese commands require a permission level same or bigger than 3 to run them.\n\n/ban [ ] - Adds the player's profile into the server's banlist\n/ban-ip [ ] - Adds the player's IP address into the server's banlist\n/banlist [ips|players] - Displays the server's banlist\n/debug- Starts or stops a debug\n/deop- Removes a player operator status\n/kick [ ] - Kicks a player off a server. (Note, a player in single player / the host of the world can't be kicked!)\n/op- Makes a player operator\n/pardon- Removes player's profile from the server's banlist\n/pardon-ip- Removes player's IP address from the server's banlist\n/tick |freeze|unfreeze|step [|stop]|sprint [|stop]> - Controls or checks the tick rate of a world\n/transfer [- Transfers a player to a different server\n/whitelist... - Modifies the server's whitelist\n\nPermission level 4\n\nThese commands require a permission level same or bigger than 4 to run them.\n\n/jfr start|stop - Starts or stops JFR(Java FlightRecorder & other custom events) profiling\n/perf- Captures info and metrics about the game for 10 seconds\n/publish] - Opens a singleplayer world to your local network\n/save-all [ ] - Saves the server to a disk\n/save-on - Enables automatic server saves\n/save-off - Disables automatic server saves\n/setidletimeout- Used to set the time before idle players are kicked (If 0 - disabled)\n/stop - Stops the server\n/version - Sends the server's version info (the name, protocol version and the resourcepack and datapack formats).\n\nList of commands by Server Type\n\nMultiplayer Only Commands\n\nThese commands can only be run only on a server.\n\n/ban [ ] - Adds the player's profile into the server's banlist\n/ban-ip [ ] - Adds the player's IP address into the server's banlist\n/banlist [ips|players] - Displays the server's banlist\n/deop- Removes a player operator status\n/op- Makes a player operator\n/pardon- Removes player's profile from the server's banlist\n/pardon-ip- Removes player's IP address from the server's banlist\n/perf- Captures info and metrics about the game for 10 seconds\n/save-all [ ] - Saves the server to a disk\n/save-on - Enables automatic server saves\n/save-off - Disables automatic server saves\n/setidletimeout- Used to set the time before idle players are kicked (If 0 - disabled)\n/stop - Stops the server\n/transfer [- Transfers a player to a different server\n/whitelist... - Modifies the server's whitelist\n\nSingleplayer Only Commands\n\nThis command can only be run in singleplayer, not on a server.\n\n/publish[ ] - Opens a singleplayer world to your local network","description":null,"url":"/wiki/command/all/","tags":[]},{"title":"/summon","content":"/summon command\n\nThe /summon command is used to summon an entity at a position, along with any entity NBT.\n\nSyntax\n\nThe syntax of the /summon command is as follows:\n\nsummon position\n\n : an ID of a minecraft entity. For example: minecraft:cow, marker, zombie. If the namespace\n(minecraft:) is omitted, it will default to the minecraft namespace.\nposition] (optional): the [coordinates at which the entity should be spawned.\n(Defaults to the current position).\nnbt data] (optional): a compound containing the NBT (in [SNBT format) which the entity should be\nspawned with. For example: {NoAI:1b}.\n\nExamples\n\nsummon minecraft:cow - Summons a cow at the current position.\nsummon minecraft:ender_dragon50 ~ - Summons an ender dragon 50 blocks above the current position\nsummon minecraft:wither 29 372 121 - Summons a wither at the coordinates x=29, y=372, z=121\nsummon minecraft:zombie~ {NoAI:1b} - Summons a zombie at the current position with the NoAI NBT, meaning it\nwill not move around or attack players.\n\nAlternatives\n\nThe execute summoncommand can also be used to summon an entity. Using this\nexecute subcommand will summon an entity at the current position, and then run the specified\ncommand as the newly summoned entity.\n\nHowever, execute summon cannot provide any NBT to give the entity upon being spawned. You will have to edit the nbt in\nthe command/function which is executed, which can be a bit tedious. An alternative to\nexecute summon minecraft:cow run function custom_function would be the following:\n\nsummon minecraft:cow~ {Tags:[\"newly_summoned_cow\"]}\nexecute as @n[type=cow,tag=newly_summoned_cow] at @s run function custom_function\ntag @n[type=cow,tag=newly_summoned_cow] remove newly_summoned_cow","description":"The /summon command is used to summon an entity at a position, along with any entity NBT.","url":"/wiki/command/summon/","tags":[]},{"title":"/data","content":"/data command\nThe /data command is used to modify and fetch NBT data of blocks, entities and storages.\n\n\nPlayer data cannot be modified using commands. All subcommands fail when trying to modify player data.\n\n\nSubcommands\nget path\nGets the data from a data source, and a path, if specified. Multiplies the resulting value by scale, if specified.\nsource is a data source, path is an nbt path and scale is a number.\nIf scale is set, and the data at that path it not a number, the command fails.\n\nAfter fetching the NBT at the path, if it exists, it prints the data in SNBT format in the chat. Therefore, its main use is manually inspecting NBT data. However, it also returns the integer representation of the fetched data, so it can be used in combination with execute store or return run to convert NBT into an integer.\n\nExamples\ndata get entity @s SelectedItem.id\ndata get block~ Items\n\nmerge \nMerges data with the given data source.\ntarget is a data source and nbt is an SNBT compound.\nThis command fails if the given entity or block does exist, or if the block is not a block entity and cannot hold NBT data. However, if the data source is a storage, and that storage does no exist yet, the storage is automatically created. \n\nExamples\ndata merge entity @ntype=creeper] {Fuse: 10s, ignited: true, ExplosionRadius: 8}\ndata merge storage example:data {a: 1, b: \"b\", c: [41b, 0b]}\n\nmodify \nModifies the NBT data at the specified path of the given data source. This gives more fine-grained control that data merge.\ntarget is the [data source to modify and path is an NBT path, the specific sub-path of that data source.\naction determines what kind of modification occurs. There are 5 possible actions, as below.\nsource determines the source of the data being used to modify the target. See source below.\n\nappend\nAppends an NBT value to a list or a typed array, making the value the last element.\nIf the specified path does not exist in the data source, it is created and initialized as a list containing the value just appended.\nThis is equivalent to data modify ... insert 0 ....\n\ninsert \nInserts an NBT value into a list or array at a specific index, shifting all proceeding elements to the right. Negative indices may be used to indicate inserting values from the end.\nIf the index specified would cause the inserted item to be further than one after the first or last element of the list, the command fails.\nInserting creates list if it doesn't exist in the same way as append.\n\nmerge\nMerges source into target at path. This is similar to data merge, but allows modifying a sub-path of a data source, and allows merging from more than just hardcoded NBT values.\n\nprepend\nPrepends an NBT value to a list or a typed array, making the value the first element.\nLists are created in the same wat as append.\nThis is equivalent to data modify ... insert -1 ....\n\nset\nSets the value of target at path, discarding any previously present value. This will create keys in a compound if not present, but cannot be used to add elements to an array or list, only modify existing ones.\nset can create a chain of nested compounds if they don't already exist.\nFor example, if the storage example:main does not yet exist, after the following command:\ndata modify storage example:main a.b.c.d set value 10\nThe example:main storage looks like this: {a: {b: {c: {d: 10}}}}.\n\nsource\nsource determines the value modifying target. It can be one of:\n\nvalue- Gets the value from an SNBT literal.\nfrom path] - Gets the data from the specified [data source and path.\nstring path end] - Gets the data from the specified [data source and ensures that it's a string. If start or end is specified, truncates the string using those values. start is inclusive, while end is exclusive. Both numbers are allowed to be negative, counting from the end of the string. For example, the indices 1 -1 remove one character from each end of the string, while 0 1 takes the first character.\n\nremove \nRemoves the NBT data from source at path. source is a data source and path is an NBT path.\nThis deletes compound keys, and removes array and list elements, shifting proceeding elements left. It cannot, however, be used to delete an entire storage using the special {} path; only single keys of the root storage.\n\n\nIf you would like to be able to remove an entire storage in one go, put all your NBT data in a sub-path of it, for example:\ndata modify storage example:main temp.a set value 1\ndata modify storage example:main temp.b set value 2\nRemoves both keys\ndata remove storage example:main temp\n\n\nData source\nThe place to get data from or store data to. One of:\nentity- The NBT of an entity.\nblock- The NBT of a block entity.\nstorage- The NBT from a data storage.\n\nData merging\nData merging is a process of merging two data values into one another.\nThere are two values: The left side and the right side. The left side is the base of the operation, with the right being merged into the left. \n\nIf both sides of the operation are compounds, each key of the right compound is merged into the matching key of the left compound. If the key does not exist in the left compound, it is created and set to the value of the right.\n\nIf both sides are not a compound, the left is simply set to the right.","description":"The data command is used to modify and fetch NBT data of blocks, entities and storages.","url":"/wiki/command/data/","tags":[]},{"title":"/function","content":"/function command\n\nThis command runs any .mcfunction file when called. You can also pass in a NBT compound or NBT source path if the\nfunction is a macro function. All functions are run independently and one after another - for example, if you run\nfunction1 and then function2, then function2 will only run once function1 has finished.\n\nSyntax\n\nfunction : : Runs the .mcfunction file at data/ /function/ \nfunction : {key:value}: Runs the .mcfunction file at\ndata/ /function/ , and uses the {key:value} if the function is a macro function.\nfunction : with (block |entity |storage ) : Runs the\n.mcfunction file at data/ /function/ , and uses the NBT source if the function is a macro\nfunction.\n\n\nYou can stop a function running in real-time using the return command.\n","description":"This command runs any `.mcfunction` file when called. You can also pass in a NBT compound or NBT source path if the function is a macro function. All functions are run independently and one after another - for example, if you run `function1` and then `function2`, then `function2` will only run once `function1` has finished.","url":"/wiki/command/function/","tags":[]},{"title":"JSON","content":"JSON Format\nJSON is a data storage type used by Minecraft Datapacks for files such as predicates and tags, as well as in JSON Text. JSON is a way of storing data, usually used in .json files but is also seen in .mcmeta files too.\n\nHow JSON works\nJSON stands for JavaScript Object Notation. It was originally created as a way of writing objects in Javascript. These days, JSON is used in almost every programming environment, datapacks included.\n\nJSON is a way of storing information so that both a computer and a human can understand it. It stores data as key-value pairs - this means that a key (such as name) can store any value (such as Aron Aronson). The code can ask for name, and it will get the result Aron Aronson.\n\nA .json file usually is itself just a JSON object (aka a JSON dictionary). A JSON dictionary is like a real dictionary because it holds sets of key/value pairs - just like how a dictionary consists of word/definition pairs. In a JSON dictionary, the key and value are separated by a colon (\"key\":value), and each key/value pair is separated by a comma.\n\nExample JSON\n{\n\"name\":\"Aron Aronson\",\n\"age\":83,\n\"alive\":true,\n\"family_members\":\n\"James Aronson\",\n\"Catherine Aronson\"\n],\n\"login_details\":{\n\"email\":\"aron.aronson@gmail.com\",\n\"password\":\"MyNameIsAron12345\"\n}\n}\nAn explanation of this file:\nEverything is contained within curly brackets {...}, which means that the whole file is a JSON dictionary.\nThe first key/value pair is \"name\":\"Aron Aronson\". The key here is name, and it has a string (text) value: \"Aron Aronson\"\nThe second key/value pair is \"age\":83. The key here is age, and it has a integer (whole number) value of 83. The number isn't \" signs, because if a value is in \" signs, it is considered to be text.\nThe third key/value pair is \"alive\":true. The key here is alive, and it has a boolean (true/false) value of true.\nThe fourth key/value pair is \"family_members:[...]\". The key here is family_members, and it has a list value (indicated by the square brackets []). This list has two string (text) values. The list does not contain key/value pairs, just values.\nThe final key/value pair is \"login_details\":{...}. The key here is login_details, and it has a dictionary value. The dictionary itself contains two key/value pairs.\n\nNote that the key in a key/value pair is contained within \" signs - don't confuse this with the string data type seen in the first key/value pair. The key is always on the left of the colon, and is always in \" signs. The value is always on the right of the colon, and should only use \" signs if it is a text value.\n\nTypes of values\nYou can use the following data types for JSON values:\nString (e.g \"Hi! I am text\"): A string is plain text. Everything inside the string should be contained within \" or ' signs. If you want to use one of those signs within the string without making the computer think the string has ended, put a \\ before the character (e.g \"Dave said \\\"Hello\\\".\")\nInteger (e.g 42): An integer (often called an int) is a whole number. This is also often used to store date and time values (seconds since Jan 1 1970)\nFloat (e.g 12.5): A float (short for \"floating point number\") is any decimal number. The decimal point needs to be a . symbol.\nBoolean (e.g true or false): A boolean is either true or false. In some circumstances, these are just easier ways to write 1 or 0.\nList (e.g [123, \"hello\", 456, \"goodbye\"]): A list is an ordered collection of values (not key/value pairs). List items should be contained within square brackets ([]) and separated with a comma. Confusingly, the first item in a list is \"item 0\", the second one is \"item 1\", etc.\nDictionary (e.g {\"name\":\"Aron\", \"age\":94}): A dictionary contains key/value pairs, separated by commas. The key needs to be inside \" signs, and followed by a colon.\n\nJSON Paths\nA JSON path is basically the address of a specific value within a JSON structure. Nested dictionaries (if the value of a key is a dictionary) are separated by . signs, otherwise it's pretty straightforward how they work. \n\nIf we assume that root contains the entirety of the example file (remember that the contents of the file itself is just a JSON dictionary), then the following paths can be used:\nroot.name would return \"Aron Aronson\"\nroot.alive would return true\nroot.family_members[0] would return \"James Aronson\" (the first item in the array)\nroot.login_detiails.password would return \"MyNameIsAron12345\"\n\nIn datapacks, you will not use JSON paths often, but you will use [NBT paths, which are very similar.\n\n\nThe format for paths above is only the most commonly seen path format. Other languages, such as Python, use a different format, such as:\nroot\"login_details\"","description":"A rough guide to the JSON format used in Minecraft Datapacks (among other places)","url":"/wiki/info/json/","tags":[]},{"title":"Breaking Changes","content":"List of breaking changes\n\nThis is list of all breaking changes to datapacks (excluding resource packs). Special thanks to Misode's Technical\nChangelog and the Minecraft Wiki for the source of many of these.\n\n1.21.6\n\nOther\nIf you are using an item which renders bigger than its inventory size is (most likely for a barrel/custom GUI), it will break with this version. You can change the item model to behave like previously by changing the newly added oversized_in_gui item model field in the resource pack.\nThe sound event id block.sand.wind has been renamed to block.dry_grass.ambient\nAll JSON files (in worlds, packs, configuration, etc.) are now parsed in strict mode\nUsers will now be prompted for confirmation before executing a command from the run_command click action in books and chat if the command requires permissions higher than 0. This is not a breaking change, just a warning which shows to the player.\n\nItem Componenents\nThe painting/variant component no longer accepts inline variants\n\nEntity Data\nThe Particle field in the area_effect_cloud entity has been renamed to custom_particle, and now always functions as an exact override for the default colored entity_effect particle\n\nTags\nRenamed #plays_ambient_desert_block_sounds block tag to #triggers_ambient_desert_sand_block_sounds \n\n1.21.5\nYou can also watch this video from Conure covering the breaking datapack changes: Why Your Datapack Broke in 1.21.5\n\nOther\nTrim pattern and trim material items are no longer specified in the trim registries, but instead in the recipes and items respectively\n🛠️ To fix this:\n1) Trim Pattern - delete the field template_item from your trim pattern file, and add a new field containing your trim pattern id into your smithing trim pattern recipe. See the Smithing Trims guide for an example.\n2) Trim Material - delete the field ingredient from your trim material file, and add the provides_trim_material item component to your item. (E.g. barrierprovides_trim_material='minecraft:iron']) See the [Smithing Trims guide for an example.\nField background in advancement definition no longer contains textures/ prefix and .png suffix\nWolf Variants\nIn the wold variants file, the fields angry_texture, tame_texture and wild_texture have been grouped in field assets and renamed to angry, tame and wild.\nAdded field spawn_conditions, which describes where the variant can spawn. See more in the changelog under \"Spawn conditions\".\n\nData Types\nThe data format of Text Components was changed from JSON to SNBT.\nWith that, all the special formats and values were changed. You can read more about it on the changelog.\nFor example, minecraft:custom_name=\"{\"text\":\\\"Renamed item\\\"}\" is now minecraft:custom_name={text:'Renamed item'}. Or the previous /tellraw @s \"\"text\":\"Hello world\"\" is now /tellraw @s {text:'Hello world'}\n\nTags\nRemoved #default_spawns and #full_moon_spawns in cat variant tags\nRenamed #dead_bush_may_place_on block tag to #dry_vegetation_may_place_on \n\nEntities & Entity Data\nThe potion entity type has been split into splash_potion and lingering_potion\n\nA lot of fields will no longer be preserved, or have been removed (You can see them all on https://www.minecraft.net/en-us/article/minecraft-snapshot-25w07a)\nThe ArmorDropChances, HandDropChances, and body_armor_drop_chance fields have been merged into a drop_chances field.\nThe format is a list of equipment_slot:value variables. E.g. drop_chances:{chest:0.1,feet:1.0}\nAnd drop chances with a default value are no longer stored. Thedrop_chancesfield is removed entirely if all defaults.\nThe ArmorItems, HandItems, and body_armor_item fields have been merged into an equipment field\nThe format is a list of equipment_slot:item_stack variables. E.g. equipment:{chest:{id:'minecraft:diamond_chestplate'}}.\nThis affects all mobs and Armor Stands, but not players.\nThe format of saddles has been unified between mobs, becoming a new equipment slot, stored in the equipment.saddle field.\nThis is a pure rename from the previous SaddleItem in horse-like mobs. In striders and pigs this replaces the old Saddle boolean.\nThe Saddle dropping on death is now affected by the drop_chances field.\nThe FallDistance field has been changed from float to double and is now called fall_distance\nThe armor and off-hand equipment of Players is now also stored in the equipment field (although items written into the Inventory using armor and off-hand slot numbers still work)\nPos, Motion, and Rotation values without the correct number of components (3, 3, and 2 respectively) will now be fully discarded, instead of only selecting the specified components\nThe SleepingX, SleepingY, and SleepingZ fields have been merged into a single sleeping_pos field (e.g. sleeping_pos: I;1,2,3])\nBlock States in the entity data of Arrows, Minecarts, Block Displays, Endermen, Falling Blocks, Primed TNT, or Piston Moving Blocks are no longer allowed to be specified as an empty object\n\nLots of entity and block entity data fields now have a new default value. Click to see them all\n\nEntity Data\ncreeper - Fuse defaults to 30; ExplosionRadius defaults to 3;\ntnt - block_state defaults to tnt; fuse defaults to 80; explosion_power defaults to 4;\ngoat - HasLeftHorn and HasRightHorn fields default to true;\ninteraction - width and height fields default to 1;\nallay - CanDuplicate field removed (now controlled by DuplicationCooldown);\ncat - CollarColor defaults to 14 (red);\ndolphin - TreasurePosX, TreasurePosY, TreasurePosZ fields removed; Moistness defaults to 2400;\nfalling_block - BlockState defaults to sand; HurtEntities defaults to false (or true if BlockState is anvil); FallHurtAmount defaults to 0; FallHurtMax defaults to 40; DropItem defaults to true;\nfox - Trusted field defaults to empty;\nphantom - Size renamed to size; AX, AY, and AZ fields collected into a single anchor_pos field;\nplayer - SpawnX, SpawnY, SpawnZ, SpawnAngle, SpawnDimension, and SpawnForced fields collected into a single respawn field; enteredNetherPosition renamed to entered_nether_pos;\nturtle - HomePosX, HomePosY, and HomePosZ fields collected into a single home_pos field; HasEgg renamed to has_egg;\nvex - LifeTicks renamed to life_ticks; BoundX, BoundY, and BoundZ fields collected into a single bound_pos field;\nwolf - CollarColor defaults to 14 (red);\narea_effect_cloud - Duration defaults to -1 (infinite);\nender_dragon - DragonDeathTime defaults to 0;\nfirework_rocket - ShotAtAngle defaults to false;\nghast - ExplosionPower defaults to 1;\nitem - Health defaults to 5; PickupDelay defaults to 0; Age defaults to 0;\nitem_frame and glow_item_frame - ItemDropChance defaults to 1.0;\nshulker - Color defaults to 16 (no color);\nskeleton - StrayConversionTime field removed;\nspectral_arrow - Duration defaults to 200;\nsnow_golem - Pumpkin defaults to true;\ntnt_minecart - fuse defaults to 80; explosion_power defaults to 4; explosion_speed_factor defaults to 1;\ntrader_llama - DespawnDelay defaults to 47999;\nvillager - FoodLevel and Xp fields default to 0;\nwandering_trader - DespawnDelay defaults to 0;\nzombie - DrownedConversionTime field removed;\nzombie_villager - Xp defaults to 0;\narrow, spectral_arrow, trident - damage defaults to 2;\ndragon_fireball, wind_charge, breeze_wind_charge, wither_skull, small_fireball, and large_fireball - acceleration_power defaults to 0.1;\nsmall_fireball and large_fireball - ExplosionPower defaults to 1;\nblock_display, item_display, and text_display - interpolation_duration, teleport_duration, and start_interpolation fields default to 0; view_range defaults to 1; shadow_radius defaults to 0; shadow_strength defaults to 1; width and height fields default to 0;\n\nBlock Entity Data\ncampfire - CookingTimes and CookingTotalTimes fields removed;\nchiseled_bookshelf - last_interacted_slot defaults to -1;\nhopper - TransferCooldown defaults to -1;\njigsaw - name, target, and pool fields default to minecraft:empty; final_state defaults to minecraft:air;\nsculk_shrieker - warning_level defaults to 0;\nstructure_block - ignoreEntities and showboundingbox fields default to true; posY defaults to 1;\n\nCommands\nThe horse.saddle item slot has been renamed to saddle, and now supports any entity that can equip a Saddle.\nThe behavior of setblock and fill commands have changed in how they handle block entity data:\nIf the block entity data is not specified, and the existing block has data, the block entity data will be preserved\nIf the block entity data is specified, the block entity data will be set to the specified value\nTo clear the block entity data explicitly, you must now specify the block entity data as {}\nThe operation is now successful if either the block state changed or the block entity data changed\n\nItem Componenents\nEntities now have a set of components fro changing variants and other apperance like stuff.\nMob buckets and paintings available in creative menu will now use new entity variant components instead of [entity_data component\nCustom tooltips for Bucket of Tropical Fish and Painting items are now based on new components instead of bucket_entity_data and entity_data\nThe hide_additional_tooltip and hide_tooltip component were removed, and replaced by the new tooltip_display component. This means that all the items which used this will now need to be hidden using the new component.\nAll item components which had a show_in_tooltip field, had this field removed. The old behaviours can be done using the new tooltip_display component.\nIn the dyed component, the color field now always uses its simplified form, with the rgb field inlined to top-level (e.g. dyed_color={rgb:12345} → dyed_color=12345).\nIn the can_place_on and can_break, the predicates field has been inlined to top-level, and supports either a single element or list. (e.g. can_place_on={predicates:{blocks:'stone'},{blocks:'dirt'}]} → can_place_on=[{blocks:'stone'},{blocks:'dirt'}])\nThe [enchantments and stored_enchantments components, will now always use their simplified form, with the levels field inlined to top-level (e.g. enchantments={levels:{sharpness:2}} → enchantments={sharpness:2})\n\nRecipes\nThe base ingredient field is no longer optional in the smithing_transform recipe type.\nThe base, template, and addition ingredient fields are no longer optional in the smithing_trim recipe type.\nAdded a new field pattern in the smithing_trim recipe type.\n\nPredicates\nSome entity sub-predicates have been removed and replaced by a combination of components predicate and variant entity components\nThese include: axolotl, fox, mooshroom, rabbit, horse, llama, villager, parrot, salmon, tropical fish, painting, cat, frog, wolf, pig\nField color has been removed from minecraft:sheep sub-predicate\nThe stepping_on entity predicate can now only evaluate to true if the entity is on ground\n\n1.21.4\nYou can also watch this video from Conure covering the breaking datapack changes: Why Your Datapack Broke in 1.21.4\n\nItem Components\nField model in equippable component has been renamed to asset_id.\nThe dyed component now tint's based on the model, not item ID.\nThe custom_model_data component has new fields floats, flags, strings, colors.\nItem blocks with block_entity_data component will now set block entity data only if id tag matches type of placed block entity\n\nRenames\nThe TNTFuse field of TNT Minecarts has been renamed to fuse\nChanged some Furnace, Smoker and Blast Furnace data. From camelCase to snake_case.\nRenamed CookTime to cooking_time_spent\nRenamed CookTimeTotal to cooking_total_time\nRenamed BurnTime to lit_time_remaining\n\nOther\nRemoved #tall_flowers block tag. And also removed the #flowers and #tall_flowers item tags.\nThe trail particle has a new required field: duration - Indicates, in ticks, for how long the particles should travel to its destination.\n🎨 The item model resource pack format got completely changed, now allowing for tinting, layered, conditional, and much more!\n\n1.21.2\nYou can also watch this video from Conure covering the breaking datapack changes: Why Your Datapack Broke in 1.21.2\n\nItem Components\nThe food item component no longer automatically allows for consumption of food, and now only holds the data relating to it (meaning nutrition, saturation and can_always_eat are the only fields left in the component)\n🛠️ To fix this, just add the consumable component: consumable={}. This component is very customizable, you can read about it here.\nThe lock has been changed into an item predicate, with a format of lock={ITEM_PREDICATE}\n🛠️ The previous lock=\"MyKey\" would now look like lock={components:{\"minecraft:custom_name\":\"'MyKey'\"}}\nThe fire_resistant component has been renamed to damage_resistant, with a new field\ntypes - A # damage type tag. Items in entity form or worn by players with this component will be resistant to the damage types included in the tag.\n\nLoot Tables\nThe /loot command now returns an error when trying to drop from block without loot table (like air)\nThe special loot table empty has been removed.\nSheep now always use a single loot table entities/sheep, but wool drops are still defined in sub-tables inentities/sheep/ \n\nOther\nAttribute IDs now don't have the generic., player. or zombie. prefixes anymore (generic.scale → scale).\nboat and chest_boat entity types have been split into separate types, one per variant (Type=oak →\nminecraft:oak_boat,...)\nWith that the minecraft:boat entity sub-predicate has been removed.\nThe previous Lock field of containers has been renamed to lock and is now an item predicate.\nYou now cannot ride Leash Knots, Lighting Bolts and Fishing Bobbers with /ride command.\nThe killed_by_crossbow advancement was renamed to killed_by_arrow, and will now trigger whenever an arrow kills an entity, not just when fired from a crossbow.\nRenamed effect type damage_item to change_item_damage, which now also supports negative amounts.\nRemoved liquid carvers and changed biome format (the carvers field is now just a list of carvers)\n\n1.21\nYou can also watch this video from Conure covering the breaking datapack changes: Why Your Datapack Broke in 1.21\n\nGeneral Renames\nAll folders which previously had plural names (except tags) now have singular names. A list of all changed folders can be found below:\nstructures → structure\nadvancements → advancement\nrecipes → recipe\nloot_tables → loot_table\npredicates → predicate\nitem_modifiers → item_modifier\nfunctions → function\ntags/functions → tags/function\ntags/items → tags/item\ntags/blocks → tags/block\ntags/entity_types → tags/entity_type\ntags/fluids → tags/fluid\ntags/game_events → tags/game_event\nThe uuid and name arguments have been replaced with a singular namespaced id argument.\n🛠️ For example: attribute ... modifier add 0.5 add_value would now look like attribute ... modifier add 0.5 add_value\n\nEntity NBT\nEntity attribute format has changed:\nAttributes → attributes\nName → id\nBase → base\nModifiers → modifiers (Now stores modifiers in the same format as modifiers in the minecraft:attribute_modifiers item component)\nUUID → uuid\nName → id\nAmount → amount\nOperation → operation (This is now a named constant instead of an int)\nadd_value - now a string, previously 0\nadd_multiplied_base - now a string, previously 1\nadd_multiplied_total - now a string, previously 2\n🛠️ For example: summon ... {Attributes:{Name:\"generic.scale\",Base:2,Modifiers:[{UUID:[I;1,0,0,0],Name:\"example_modifier\",Amount:1,Operation:0}]}]} would now look like summon ... {attributes:[{id:\"generic.scale\",base:2,modifiers:[{id:\"tutorial:example_modifier\",amount:1,operation:\"add_value\"}]}]}\nReplaced the power NBT tag with an acceleration_power tag. This controls the projectile's acceleration (and maximum speed).\nThis applies to: dragon_fireball, large_fireball, small_fireball, fireball, breeze_wind_charge, wind_charge, wither_skull.\nThe field ShotFromCrossbow from projectile NBT has been removed. A new weapon field has been added to replace this feature.\n🛠️ For example: @e[type=arrow,nbt={ShotFromCrossbow:1b}] would now look like @e[type=arrow,nbt={weapon:{id:\"minecraft:crossbow\"}}]\n\nTags\nRemoved the #minecraft:music_discs item tag\n\nPredicates\nSome predicate fields have been renamed:\nkiller → attacker\ndirect_killer → direct_attacker\nkiller_player → attacking_player\nThe random_chance_with_looting has been renamed (because it's now controlled by enchantments) to random_chance_with_enchanted_bonus. The fields were updated accordingly:\nThe looting_multiplier field has been removed\nThe chance field has been removed.\nenchantment - is a new field containing the namespaced:id of the Enchantment that grants the bonus chance\nenchanted_chance is a new field for the chance for an enchanted item. A level-based value.\nunenchanted_chance - is a new field specifying the chance for an unenchanted item.\nIf you are testing for an enchantment on your item, the field enchantment → enchantments. Can be either an Enchantment, a list of Enchantments or an #Enchantment Tag.\n\nItem Modifiers\nThe looting_enchant field has been replaced by enchanted_count_increase. This has a new field enchantment (specifies which enchantment).\nUnder enchant_randomly the field enchantments is now called options.\nUnder enchant_with_levels the field treasure was removed.\nUnder copy_name the field killer → attacking_entity and killer_player → last_damage_player\n\n[1.20.2\nEntity effects in NBT now use namespaced IDs instead of numbers.\nThe structure for entity effects in NBT has been changed from PascalCase to snake_case.\nFor mob effect instances:\nId → id\nAmbient → ambient\nAmplifier → amplifier\nDuration → duration\nShowParticles → show_particles\nShowIcon → show_icon\nHiddenEffect → hidden_effect\nFactorCalculationData → factor_calculation_data\nFor others:\nCustomPotionEffects → custom_potion_effects (potion, lingering_potion, splash_potion, tipped_arrow, arrow)\nEffects → effects (suspicious_stew, area_effect_cloud)\nEffectId → id` (suspicious_stew)\nEffectDuration → duration (suspicious_stew)\nEffectId and EffectDuration → stew_effects (mooshroom)\nActiveEffects → active_effects (player, armor_stand, mobs)\nPrimary → primary_effect (beacon)\nSecondary → secondary_effect (beacon)","description":"A list of breaking changes to datapacks.","url":"/wiki/info/breaking-changes/","tags":[]},{"title":"Scoreboards","content":"Scoreboards\nScoreboards are a key/value system for storing numbers bound to a player in Minecraft. On a scoreboard objective, each player can have a score, which is an integer value. This player does not need to exist - fake players can be used to store a number without attaching it to a player but rather an arbitrary name.\n\nYou can modify objectives with the /scoreboard or /execute store commands. Some objectives can automatically change based on player statistics.\n\nScoreboard objectives can also be optionally displayed on the sidebar, under a player's name, and/or in the tab list - although only one objective can be shown in each slot at a time.\n\nTypes of scoreboard objectives\nThere are three main types of scoreboard objectives in Minecraft.\n\nDummy objectives \nThese are objectives which can only be modified with commands, like a \"blank\" scoreboard which you can modify however you want. They are useful for storing arbitrary numbers, or tracking custom values within your datapack. \n\nYou can create this scoreboard with the command: /scoreboard objectives add objective_name dummy. For a better example, take a look at the following function:\n\nscoreboard objectives add intelligence dummy\nscoreboard players set @a intelligence 100\nexecute store result score Silabear intelligence run data get entity Silabear Health\n\nThis would create the following scoreboard:\n\n| Player | intelligence |\n| - | ------------ |\n| Player1 | 100 |\n| Player2 | 100 |\n| Silabear | 20 |\n\nYou can also put fake players on a dummy objective. These work just like normal players on an objective, except they don't exist. You can specify a fake player by using a special character such as a #, $, ., etc. before the name. For example:\nscoreboard players set #max intelligence 150\n\nCriteria-based objectives\nThese are read-only objectives which are automatically updated based on player statistics. They are usually used to track player events or progress. For example, the criteria minecraft.custom:minecraft.sneak_time will store the amount of ticks a player has been sneaking on the objective.\n\nscoreboard objectives add sneaking_duration minecraft.custom:minecraft.sneak_time\n\nAfter sneaking for one second, the objective will look like this:\n\n| Player | sneaking_duration |\n| - | ------------ |\n| Player1 | 20 |\n\nTrigger objectives: \nThese are objectives which allow the player to manually set their score using the /trigger command. This is especially useful for creating chat UIs, as it is the closest thing we have to creating \"custom commands\" with datapacks. Any player can run /trigger, regardless of their operator status.\n\nA player may only run /trigger if that trigger objective has been enabled for that user. Once a user has used /trigger on an objective, they cannot use it again until it is re-enabled.\n\nscoreboard objectives add option trigger\nscoreboard players enable @a option\n\nPlayers will now be able to use the /trigger command to modify their score on the option objective.\n\n/trigger option will set the player's score to 1.\n/trigger option set 5 will set the player's score to 5.\n/trigger option add 3 will add 3 to the player's score.\n\n\nThere is also a way to disable a scoreboard objective for players, so that they cannot trigger it until it is re-enabled:\nscoreboard players reset @a option\n","description":"Scoreboards are a way of storing numerical data attributed to a player or entity in a Minecraft Datapack.","url":"/wiki/nbt-scoreboards/scoreboards/","tags":[]},{"title":"NBT","content":"NBT\nNBT (Named Binary Tags) is a structured (key/value) data format used by Minecraft to store data about entities, items, blocks, structures, player data, worldgen, and more. You can use it to store custom data in items and NBT storages.\n\nSNBT Format\nSNBT (Stringified Named Binary Tags) format is a JSON-like tree structure used in datapack development to manipulate the\nNBT data of an entity. SNBT is a human-readable version of NBT (Named Binary Tags), which is a format used by Minecraft\nto store data. NBT is used to store data about entities, items, blocks, structures, game saves, and more.\n\nSNBT consists of key/value pairs, which are represented as key:value. These are contained with compounds,\nmarked with curly brackets ({}). Compounds can contain multiple key/value pairs, which are separated with commas, like\nso: key:value,key:value,key:value\n\nAn example SNBT structure looks like:\n{name:\"Silabear\",age:102,friends:[\"Flynecraft\",\"Aandeel\",\"Cobblestone\"],socials:{discord:\"silabear\"}}\n\nNBT paths\nNBT paths are used to reference a specific location within an NBT structure. They are used in commands like /data get and /data modify to access or modify NBT data. \n\nNBT paths are made up of a series of keys, separated by dots (.). Square brackets ([]) can be used to access items in an array, either by index array[0] or by object value (array[{age:102}])\n\nImagine the following NBT structure:\n\n{\nroot: {\nversion: 1,\ntitle: \"Targets\",\npeople: [\n{name: \"Silabear\", age: 102},\n{name: \"Aandeel\", age: 100}\n]\n}\n}\n\nThe following are examples of NBT paths:\nroot.version: would give the value 1.\nroot.title: would give the value \"Targets\".\nroot.people[0]: would give the value {name: \"Silabear\", age: 102}.\nroot.people[0].name: would give the value \"Silabear\".\nroot.people[{name:\"Aandeel\"}]: would give the value {name: \"Aandeel\", age: 100}.\nroot.people[{name:\"Aandeel\"}].age: would give the value 100.\n\nNBT storages\nStorages allow you to store NBT data in a world without binding it to a physical object (item, entity, block), but rather storing it under a namespaced ID (e.g example:main). Storages are stored globally per world, and can only be accessed with /data. Storages don't need to be initialized beforehand, unlike scoreboards.\n\nUnlike entity and block NBT, storages have no fixed structure, and can contain whichever arbitrary keys are added to it.\n\nStorage example\nStorages are defined when a /data command modifies them. Unlike scoreboards, storages do not need to be \"created\" -\nthe only code needed to initialize a storage is a /data modify or /data merge command to that storage, for example:\n\ndata merge storage example:main {number: 1, message: \"Hello!\"}\ndata modify storage example:main other_number set from storage example:main number\ndata modify storage example:main compound.array append value 42\n\nThe example:main storage would now contain the following data:\n\n{\nnumber: 1,\nmessage: \"Hello!\",\nother_number: 1,\ncompound: {\narray: [42]\n}\n}\n\nData Types\nThere are a few data types you can use to represent different types of data, including whole numbers, decimal numbers,\nstring, text, booleans, and more.\n\nStrings\n\nStrings can store any text value, or more technically, any sequence of unicode characters.\n\nFormat: Strings are stored within either double or single quotes. For strings containing standard characters\n(A-Z, a-z, 0-9, -,_,+,.), the quotes are optional (as long as the text starfts with a letter), but recommended. \"\" or ' ' or\n\nExample: name:\"Silabear\", name:'Cobblestone', name:Aandeel\n\nWhole Numbers\n\nShort, Int, and Long data types all represent integers (whole numbers).\n\nByte is an 8 bit integer, it can be any value from 0 to 255\nShort is a 16 bit integer, it can be any value from -32,768 to 32,767\nInt is a 32 bit integer, it can be any value from -2,147,483,648 to 2,147,483,647\nLong is a 64 bit integer, it can be any value from -9,223,372,036,854,775,808 to\n9,223,372,036,854,775,807\n\nFormat: By default, numbers are stored as integers. To store a number in the other formats, you need to use the appropriate suffix. For shorts, ints, and longs, the prefix is s, i, and l respectively. \n\nThe suffix can be extended with u or s to say whether it is unsigned (only a positive number) or signed (can be positive or negative) - for example, 402ub.\n\nIt is also possible to write using E notation (e.g 1.2E3 would be 1200), hexadecimals (e.g 0xBC would be 188), and binary (e.g 0b110 would be 6)\n\nExample: count:1234s, bigNumber:1200000, reallyBigNumber:12123023687234L, byte:112b\n\nDecimal Numbers\n\nFloat and Double data types both represent decimal numbers.\n\nFloat is a signed 32 bit floating point number, it can be any value from -3.4028235E38 to 3.4028235E38. It is precise to 7 decimal places.\nDouble is a signed 64 bit floating point number, it can be any value from -1.7976931348623157E308 to\n1.7976931348623157E308. It is precise to 15 decimal places.\n\nFormat: By default, decimal numbers are stored as doubles. To store a number in the other formats, you need to use the\nappropriate suffix. For floats, the suffix is f. For doubles, the suffix is d.\n\nExample: pi:3.1415926535d, e:2.718281828459045d, phi:1.6180f\n\nBytes or Booleans\n\nIn older versions of Minecraft, booleans were stored as bytes with 0b representing false and 1b representing true. In newer versions, booleans were introduced. Essentially, booleans represent the old 0b and 1b with a more descriptive name. It's recommended to use booleans instead of bytes whenever possible, as they are more readable.\n\nLists/Arrays\nLists, or number arrays are used to store multiple values. Lists can store different types of values, whereas number arrays can only store the same type of number. In practicality, you often do not need to think about the difference\n\nFormat: Theyu are defined using square brackets ([]), with the values separated by commas. Number arrays can be prefixed with the type of numbr the array is going to store and a semicolon (for instance, a list starting with [B; will only store bytes)\n\nExample: [\"Silabear\", 15, true, 242], [B;1b,2B,true,false], [\"Kanokarob\", \"LadyEternal\", \"lionlance\", \"thederdiscohund\", \"theblackswitch\"], [L;1l,2l,3l,4l,5l]\n\nValidator\n\nBelow is a validator for SNBT. It will validate the input and show you if it is valid or not.","description":"NBT is Minecraft's way of storing internal data, such as item data, entity data, and block data. In datapacks, we can use it to store data in custom data storages.","url":"/wiki/nbt-scoreboards/nbt/","tags":[]},{"title":"Credits","content":"Credits\n\nThe Datapack Wiki is managed by Datapack Hub, based on an original design and idea by\nAandeel. All of the content on this wiki is made possible thanks to the dedication of our\nawesome contributors! You can contribute to this wiki on our GitHub - click the Edit button on any page.\n\nAdministrators\n\nThese people run and develop the site, making any and all important decisions.\n\nSilabear\nCobblestone\nAandeel\n\nEditors\n\nThese people are in charge of what contributions are added to the site, as well as planning and writing new pages.\n\nGears\n\nContributors\n\nThese people have written or edited pages for the wiki or guides.\n\nDiamond\nHeDeAn\nSuperAnt_\nSwitchedCube\n\n\nIf you're contributing, feel free to add your username to this page! You can contribute by clicking the Edit\nbutton on any page.\n","description":"The Datapack Wiki is brought to you by [Datapack Hub](https://datapackhub.net) in collaboration with Aandeel.","url":"/credits/","tags":[]}]